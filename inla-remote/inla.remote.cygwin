#!/usr/bin/env.exe bash.exe

CYGWIN=1

## This version works both for Linux/Mac and Windows under CYGWIN. We
## just have to add the environment

maketemp () {
    mktemp -t inla.remote.XXXXXXXX
}

compress_put="z"
compress_get="z"
## this one is fixed, do not change
SSHDefaultPort=22

if [ "${INLA_DEBUG}XX" != "XX" ]; then
    set -vx
    echo "INLA_PATH $INLA_PATH"
    echo "INLA_HOME $INLA_HOME"
    echo "INLA_SSH_AUTH_SOCK $INLA_SSH_AUTH_SOCK"
    echo "INLA_OS $INLA_OS"
    echo "INLA_CYGWIN_HOME $INLA_CYGWIN_HOME"
    echo "INLA_HGVERSION $INLA_HGVERSION"
fi

if [ "$INLA_OS" == "windows" ]; then
    INIFILE=$INLA_HOME/.inlarc
    export SSH_AUTH_SOCK="$INLA_SSH_AUTH_SOCK"
    if [ "$INLA_CYGWIN_HOME"XX != "XX" ]; then
	export HOME=$INLA_CYGWIN_HOME
    fi
else
    INIFILE=~/.inlarc
    if [ "$SSH_AUTH_SOCK"XX == "XX" ]; then
	## this is not set, weird, but it might be that a manual setup is used
	export SSH_AUTH_SOCK="$INLA_SSH_AUTH_SOCK"
    fi   
fi

## these are the variables to be set by the user
RemoteINLA="/usr/local/bin/inla"
RemoteHost=inla.math.ntnu.no
RemoteUser=$USER
Port=$SSHDefaultPort
sshArguments="-x -o BatchMode=yes -o TCPKeepAlive=yes -e none"

if [ -r "$INIFILE" ]; then
    if [ "$INLA_OS" == "windows" ]; then
	TMP=$(maketemp)
	tr -d \\015 < "$INIFILE" > $TMP
	source $TMP
	rm -r $TMP
    else
	source "$INIFILE"
    fi
else
    echo -e "\n\n\n$0: No such file $INIFILE"
    echo -e "Run command in R: inla.remote()"
    echo -e "\n\n"
    exit 1
fi

model=$(echo "$@" | awk '{print $NF}')
dir=${model%/*}
rdir=tmp/.inla.remote/inla-remote-$(date|tr '[ :]' -)-$RANDOM$RANDOM
args=$(echo "$@" | awk '{$NF="";print}')

verbose=0
if $(echo $args | awk '$0 ~ /(^|[ \t])-v($|[ \t])/{exit 0};{exit 1}'); then
    {
	verbose=1
	echo -e "\tRun $RemoteINLA at $RemoteUser@$RemoteHost" 
    } 1>&2
fi

TMP=$(maketemp)
{
    echo "inladatadir=data.files"
    echo "inlaresdir=results.files"
    egrep -v '^(inladatadir|inlaresdir)' $model 
} > $TMP
mv -f $TMP $model

## if this script is interupted, then cleanup on the remote host
function kill_inla_remote
{
    ## only need for CYGWIN
    if [ $CYGWIN == 1 -a -f "$tarfile_to" ]; then
	rm -f "$tarfile_to"
    fi
    prog=${RemoteINLA##*/}
	ssh -p$Port $sshArguments $RemoteUser@$RemoteHost "\
	    rm -rf $rdir; \
	    pkill -u $USER $prog; \
	    sleep 3; \
	    pkill -9 -u $USER $prog" < /dev/null  > /dev/null 2>&1 &
}
trap kill_inla_remote SIGINT SIGTERM

## finally, do the job...  Do this in two steps, as it seems that for
## long jobs the pipe gets terminated.
cd $dir > /dev/null

plic="pardiso.lic"

if [ -f "$plic" ]; then
   PardisoLoad="export INLA_LOAD_PARDISO=1"
elif [ "${PardisoLicenseFile}XX" != "XX" ]; then
   cp "${PardisoLicenseFile}" $plic
   PardisoLoad="export INLA_LOAD_PARDISO=1"
else
   PardisoLoad="true"
fi	

tar cfm$compress_put - . 2>/dev/null | ssh -p$Port $sshArguments $RemoteUser@$RemoteHost "\
    mkdir -p $rdir; \
    cd $rdir; \
    eval $PardisoLoad; \
    tar xfm$compress_put - 2>/dev/null ; \
    $RemoteINLA $args Model.ini < /dev/null"

if [ $verbose == 1 ]; then
   {
       echo 
       echo -e " *** Computations finished at $(date)"
       echo -e " *** Transfer the results...\n" 
   } 1>&2
fi

## Problems has been reported using the natural first approach for
## Cygwin/Windows, so we divide the code here... Note that if Port !=
## $SSHDefaultPort we need to use the second approach

if [ $CYGWIN == 0 -a $Port == $SSHDefaultPort ]; then
    ## Linux and Mac
    ssh -p$Port $sshArguments $RemoteUser@$RemoteHost "\
    cd $rdir; tar cf$compress_get - results.files 2>/dev/null ; cd; rm -rf $rdir" | tar xfm$compress_get - 2>/dev/null 
else
    ## Cygwin/Windows or Port != $SSHDefaultPort
    tarfile=results$RANDOM$RANDOM.tar
    ssh -p$Port $sshArguments $RemoteUser@$RemoteHost "cd $rdir; tar cf $tarfile results.files 2>/dev/null "
    tarfile_to=$(maketemp).tar
    scp -P$Port -B -C -p -q $RemoteUser@$RemoteHost:$rdir/$tarfile "$tarfile_to"
    tar xfm "$tarfile_to" 2>/dev/null 
    rm -f "$tarfile_to"
fi
