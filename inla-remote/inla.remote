#!/usr/bin/env bash
## This version works both for Linux/Mac and Windows under CYGWIN. We
## just have to add the environment

if [ "${INLA_DEBUG}XX" != "XX" ]; then
    set -vx
fi
RCSId=RCSId"$Id: inla.remote.core,v 1.20 2010/03/01 08:50:29 hrue Exp $"

if false; then
    echo "INLA_PATH $INLA_PATH"
    echo "INLA_HOME $INLA_HOME"
    echo "INLA_SSH_AUTH_SOCK $INLA_SSH_AUTH_SOCK"
    echo "INLA_OS $INLA_OS"
    echo "INLA_CYGWIN_HOME $INLA_CYGWIN_HOME"
fi

if [ "$INLA_OS" == "windows" ]; then
    INIFILE=$INLA_HOME/.inlarc
    export SSH_AUTH_SOCK="$INLA_SSH_AUTH_SOCK"
    if [ "$INLA_CYGWIN_HOME"XX != "XX" ]; then
	export HOME=$INLA_CYGWIN_HOME
    fi
else
    INIFILE=~/.inlarc
    if [ "$SSH_AUTH_SOCK"XX == "XX" ]; then
	## this is not set, weird, but it might be that a manual setup is used
	export SSH_AUTH_SOCK="$INLA_SSH_AUTH_SOCK"
    fi   
fi

## these are the variables to be set by the user
RemoteINLA="/usr/local/bin/inla"
RemoteHost=mc.math.ntnu.no
RemoteUser=$USER
sshArguments="-x -o BatchMode=yes"

if [ -r "$INIFILE" ]; then
    if [ "$INLA_OS" == "windows" ]; then
	TMP=$(mktemp -t inla.remote.XXXXXXXX)	
	tr -d \\015 < "$INIFILE" > $TMP
	source $TMP
	rm -r $TMP
    else
	source "$INIFILE"
    fi
else
    echo -e "\n\n\n$0: No such file $INIFILE"
    echo -e "Run command in R: inla.remote()"
    echo -e "\n\n"
    exit 1
fi

model=$(echo "$@" | awk '{print $NF}')
dir=${model%/*}
rdir=tmp/.inla.remote/inla-job-$RANDOM-$RANDOM-$RANDOM
args=$(echo "$@" | awk '{$NF="";print}')

if $(echo $args | awk '$0 ~ /-v/{exit 0};{exit 1}'); then
    {
	echo -e "\n\t$RCSId"
	echo -e "\tRun $RemoteINLA at host $RemoteHost\n" 
    } 1>&2
fi

TMP=$(mktemp -t inla.remote.XXXXXXXX)
{
    echo "DATADIR=data.files"
    echo "RESDIR=results.files"
    egrep -v '^(DATA|RES)DIR' $model 
} > $TMP
mv -f $TMP $model

## if this script is interupted, then cleanup on the remote host
function kill_inla_remote
{
    ## echo "$0 killed... Kill process on remote host." 1>&2
    if [ "$sync_pid"XX != "XX" ]; then
        kill $sync_pid
    fi	 
    prog=${RemoteINLA##*/}
	ssh $sshArguments $RemoteUser@$RemoteHost "\
	    rm -rf $rdir; \
	    pkill -u $USER $prog; \
	    sleep 3; \
	    pkill -9 -u $USER $prog" < /dev/null  > /dev/null 2>&1 &
}
trap kill_inla_remote SIGINT SIGTERM

sync_sleep=3
sync_max=600
{ c=1; while test $c -lt $sync_max; do sleep $sync_sleep; sync; c=$[ $c + 1 ]; done; } &
sync_pid=$!


## finally, do the job...
cd $dir > /dev/null
tar cfzm - . | ssh $sshArguments $RemoteUser@$RemoteHost "\
    mkdir -p $rdir; \
    cd $rdir; \
    tar xfzm - ; \
    $RemoteINLA $args Model.ini 1>&2; \
    tar cfz - results.files; \
    cd; \
    rm -rf $rdir" | tar xfzm -

kill -9 $sync_pid >/dev/null 2>/dev/null
