diff -r 5a818c2923fb gmrflib/approx-inference.c
--- a/gmrflib/approx-inference.c	Fri Jan 30 22:44:15 2015 +0000
+++ b/gmrflib/approx-inference.c	Fri Feb 06 22:20:34 2015 +0100
@@ -82,6 +82,7 @@
 int domin_seteps_(double *epsx, double *epsf, double *epsg);
 
 static int pool_nhyper = -1;
+static double correction_value = NAN;
 
 /*!
   \brief Create a \c GMRFLib_ai_param_tp -object holding the default values.
@@ -268,6 +269,7 @@
 	(*ai_par)->correct_factor = 1.0;		       /* set but is default not used */
 	(*ai_par)->correct_strategy = GMRFLib_AI_STRATEGY_MEANCORRECTED_GAUSSIAN;
 	(*ai_par)->correct_verbose = GMRFLib_FALSE;
+	(*ai_par)->correct_value = 0.0;
 
 	return GMRFLib_SUCCESS;
 }
@@ -412,6 +414,7 @@
 		if (ai_par->correct_strategy == GMRFLib_AI_STRATEGY_FIT_SCGAUSSIAN)
 			fprintf(fp, "\t\tstrategy = [laplace]\n");
 		fprintf(fp, "\t\tverbose = [%s]\n", (ai_par->correct_verbose ? "TRUE" : "FALSE"));
+		fprintf(fp, "\t\tvalue = [%g]\n", ai_par->correct_value);
 	} else {
 		fprintf(fp, "\tLaplace-correction is Disabled.\n");
 	}
@@ -696,11 +699,14 @@
 			}
 		}
 
+		corr *= 0.5;
+		correction_value = corr;		       /* global value */
 #define FUNCORR(_x)  (2.0/(1+exp(-2.0 * (_x))) -1.0)	       // makes the derivative in 0 eq to 1
-		double upper = compute_n * ai_par->correct_factor;
-		*logdens += 0.5 * upper * FUNCORR(corr / upper);
+		double upper = ai_par->correct_factor; 	       /* Do no longer scale with 'n' */
+		double corr_val = upper * FUNCORR((corr - ai_par->correct_value) / upper);
+		*logdens += corr_val;
 		if (ai_par->correct_verbose){
-			printf("\t\tCorrect: correction: raw = %.6f adjusted = %.6f\n", 0.5 * corr, 0.5 * upper * FUNCORR(corr / upper));
+			printf("\t\tCorrect: correction: corr = %.6f value %.6f corr.val = %.6f\n", corr, ai_par->correct_value, corr_val);
 		}
 #undef FUNCORR
 
@@ -1387,7 +1393,6 @@
 				} else {				\
 					daxpy_(&np, &_alpha, logcor, &_one, ld, &_one);  /* ld = ld - logcor */ \
 				}					\
-				GMRFLib_ai_correct_cpodens(ld, xp, &np, ai_par); \
 				if (_debug && np) {			\
 					for(_i = 0; _i < np; _i++)	\
 						printf("CPO AFTER: %d %g %g\n", idx, xp[_i], ld[_i]);	\
@@ -3341,6 +3346,7 @@
 	if (misc_output) {
 		timer = misc_output->wall_clock_time_used;
 		misc_output->mode_status = 0;
+		misc_output->correct_value = 0.0;
 	} else {
 		timer = NULL;
 	}
@@ -3508,6 +3514,11 @@
 
 			switch (ai_par->optimiser) {
 			case GMRFLib_AI_OPTIMISER_DOMIN:
+				if (ai_par->correct) {
+					fprintf(stderr, "\n\nNOT YET IMPLEMENTED: 876631\n\n");
+					GMRFLib_ASSERT(0==1, GMRFLib_ESNH);
+					exit(1);
+				}
 				domin_();		       /* this is the optimizer */
 				if (ai_par->restart) {
 					for (k = 0; k < IMAX(0, ai_par->restart); k++)
@@ -3518,14 +3529,41 @@
 
 			case GMRFLib_AI_OPTIMISER_GSL:
 			case GMRFLib_AI_OPTIMISER_DEFAULT:
-				GMRFLib_gsl_optimize(ai_par);
-				if (ai_par->restart) {
-					for (k = 0; k < IMAX(0, ai_par->restart); k++)
-						GMRFLib_gsl_optimize(ai_par);	/* restart */
+			{
+				if (ai_par->correct) {
+					int icount;
+					double factor = ai_par->correct_factor;
+
+					ai_par->correct_factor = GMRFLib_eps(0.5); /* so that there is no correction, effectively */
+					GMRFLib_gsl_optimize(ai_par);
+					ai_par->correct_value = correction_value;
+					P(ai_par->correct_value);
+					ai_par->correct_factor = factor;
+					GMRFLib_domin_reset_f_best();
+					GMRFLib_gsl_optimize(ai_par);
+					ai_par->correct_factor = factor;
+					if (ai_par->restart) {
+						for (k = 0; k < IMAX(0, ai_par->restart); k++){
+							GMRFLib_domin_reset_f_best();
+							GMRFLib_gsl_optimize(ai_par);
+							ai_par->correct_factor = factor;
+						}
+					}
+					GMRFLib_domin_reset_f_best();
+					GMRFLib_gsl_optimize(ai_par);
+					if (misc_output) {
+						misc_output->correct_value = ai_par->correct_value;
+					}
+				} else {
+					GMRFLib_gsl_optimize(ai_par);
+					if (ai_par->restart) {
+						for (k = 0; k < IMAX(0, ai_par->restart); k++)
+							GMRFLib_gsl_optimize(ai_par);	/* restart */
+					}
 				}
 				GMRFLib_gsl_get_results(theta_mode, &log_dens_mode);
 				break;
-
+			}
 			default:
 				GMRFLib_ASSERT((ai_par->optimiser == GMRFLib_AI_OPTIMISER_DOMIN) ||
 					       (ai_par->optimiser == GMRFLib_AI_OPTIMISER_GSL) ||
@@ -3540,6 +3578,9 @@
 			/*
 			 * use the initial values only 
 			 */
+
+			fprintf(stderr, "\n\nCORRECT.VALUE %g\n\n\n", ai_par->correct_value);
+		
 			for (i = 0; i < nhyper; i++) {
 				theta_mode[i] = hyperparam[i][0][0];
 			}
diff -r 5a818c2923fb gmrflib/approx-inference.h
--- a/gmrflib/approx-inference.h	Fri Jan 30 22:44:15 2015 +0000
+++ b/gmrflib/approx-inference.h	Fri Feb 06 22:20:34 2015 +0100
@@ -517,6 +517,11 @@
 	 * \brief Be verbose about the correction?
 	 */
 	int correct_verbose;
+
+	/**
+	 * \brief Value for the correction term at the mode
+	 */
+	double correct_value;
 	
 } GMRFLib_ai_param_tp;
 
@@ -804,6 +809,8 @@
 	int mode_status;				       /* 0 for ok, 1 not ok. */
 
 	GMRFLib_store_configs_tp **configs;		       /* configs[id][...] */
+
+	double correct_value;
 } GMRFLib_ai_misc_output_tp;
 
 typedef struct {
diff -r 5a818c2923fb gmrflib/domin-interface.c
--- a/gmrflib/domin-interface.c	Fri Jan 30 22:44:15 2015 +0000
+++ b/gmrflib/domin-interface.c	Fri Feb 06 22:20:34 2015 +0100
@@ -126,6 +126,11 @@
 		Free(B.f_best_x);
 	return GMRFLib_SUCCESS;
 }
+int GMRFLib_domin_reset_f_best(void)
+{
+	B.f_best = 0.0;
+	return GMRFLib_SUCCESS;
+}
 int gmrflib_domin_f_(double *x, double *fx, int *ierr)
 {
 	return GMRFLib_domin_f(x, fx, ierr, NULL, NULL);
diff -r 5a818c2923fb gmrflib/domin-interface.h
--- a/gmrflib/domin-interface.h	Fri Jan 30 22:44:15 2015 +0000
+++ b/gmrflib/domin-interface.h	Fri Feb 06 22:20:34 2015 +0100
@@ -92,20 +92,21 @@
 			double *d, GMRFLib_logl_tp * loglFunc, void *loglFunc_arg, char *fixed_value,
 			GMRFLib_graph_tp * graph, GMRFLib_Qfunc_tp * Qfunc, void *Qfunc_arg,
 			GMRFLib_constr_tp * constr, GMRFLib_ai_param_tp * ai_par, GMRFLib_ai_store_tp * ai_store);
+int GMRFLib_domin_estimate_hessian(double *hessian, double *x, double *log_dens_mode, int count);
+int GMRFLib_domin_estimate_hessian_OLD(double *hessian, double *x);
 int GMRFLib_domin_exit(void);
+int GMRFLib_domin_f(double *x, double *fx, int *ierr, GMRFLib_tabulate_Qfunc_tp **tabQfunc, double ** bnew);
 int GMRFLib_domin_f_intern(double *x, double *fx, int *ierr, GMRFLib_ai_store_tp * ais, GMRFLib_tabulate_Qfunc_tp **tabQfunc, double ** bnew);
-int GMRFLib_domin_f(double *x, double *fx, int *ierr, GMRFLib_tabulate_Qfunc_tp **tabQfunc, double ** bnew);
+int GMRFLib_domin_f_omp(double **x, int nx, double *f, int *ierr);
+int GMRFLib_domin_get_f_count(void);
+int GMRFLib_domin_gradf(double *x, double *gradx, int *ierr);
+int GMRFLib_domin_gradf_OLD(double *x, double *gradx, int *ierr);
+int GMRFLib_domin_gradf_intern(double *x, double *gradx, double *f0, int *ierr);
+int GMRFLib_domin_reset_f_best(void);
 int gmrflib_domin_f_(double *x, double *fx, int *ierr);
 int gmrflib_domin_f__(double *x, double *fx, int *ierr);
-int GMRFLib_domin_f_omp(double **x, int nx, double *f, int *ierr);
-int GMRFLib_domin_gradf(double *x, double *gradx, int *ierr);
-int GMRFLib_domin_gradf_OLD(double *x, double *gradx, int *ierr);
 int gmrflib_domin_gradf_(double *x, double *gradx, int *ierr);
 int gmrflib_domin_gradf__(double *x, double *gradx, int *ierr);
-int GMRFLib_domin_estimate_hessian(double *hessian, double *x, double *log_dens_mode, int count);
-int GMRFLib_domin_estimate_hessian_OLD(double *hessian, double *x);
-int GMRFLib_domin_get_f_count(void);
-int GMRFLib_domin_gradf_intern(double *x, double *gradx, double *f0, int *ierr);
 
 double GMRFLib_gsl_f(const gsl_vector * v, void *params);
 void GMRFLib_gsl_df(const gsl_vector * v, void *params, gsl_vector * df);
diff -r 5a818c2923fb inlaprog/src/inla.c
--- a/inlaprog/src/inla.c	Fri Jan 30 22:44:15 2015 +0000
+++ b/inlaprog/src/inla.c	Fri Feb 06 22:20:34 2015 +0100
@@ -18272,6 +18272,7 @@
 	mb->ai_par->correct = (corr ? Calloc(1, char) : NULL);
 	mb->ai_par->correct_verbose = iniparser_getboolean(ini, inla_string_join(secname, "CORRECT.VERBOSE"), mb->ai_par->correct_verbose);
 	mb->ai_par->correct_factor = iniparser_getdouble(ini, inla_string_join(secname, "CORRECT.FACTOR"), mb->ai_par->correct_factor);
+	mb->ai_par->correct_value = iniparser_getdouble(ini, inla_string_join(secname, "CORRECT.VALUE"), mb->ai_par->correct_value);
 	opt = GMRFLib_strdup(iniparser_getstring(ini, inla_string_join(secname, "CORRECT.STRATEGY"), NULL));
 	if (opt) {
 		if (!strcasecmp(opt, "SIMPLIFIED.LAPLACE")) {
@@ -23360,6 +23361,16 @@
 	fclose(fp);
 	Free(nndir);
 
+	GMRFLib_sprintf(&nndir, "%s/%s", ndir, "correct_value.dat");
+	inla_fnmfix(nndir);
+	fp = fopen(nndir, "w");
+	if (!fp) {
+		inla_error_open_file(nndir);
+	}
+	fprintf(fp, "%.16f\n", mo->correct_value);
+	fclose(fp);
+	Free(nndir);
+
 	GMRFLib_sprintf(&nndir, "%s/%s", ndir, "stdev_corr_pos.dat");
 	inla_fnmfix(nndir);
 	if (mo->stdev_corr_pos) {
diff -r 5a818c2923fb rinla/R/collect.results.R
--- a/rinla/R/collect.results.R	Fri Jan 30 22:44:15 2015 +0000
+++ b/rinla/R/collect.results.R	Fri Feb 06 22:20:34 2015 +0100
@@ -405,6 +405,13 @@
         lpm = NA
     }
 
+    fnm = paste(d, "/correct_value.dat", sep="")
+    if (file.exists(fnm)) {
+        correct.value = scan(fnm, quiet=TRUE)
+    } else {
+        correct.value = 0.0
+    }
+
     fnm = paste(d, "/config/configs.dat", sep="")
     if (file.exists(fnm)) {
         fp = file(fnm, "rb")
@@ -507,9 +514,9 @@
 
     return (list(cov.intern = cov.intern, cor.intern = cor.intern,
                  cov.intern.eigenvalues = cov.intern.eigenvalues, cov.intern.eigenvectors = cov.intern.eigenvectors, 
-                 reordering = r, theta.tags = tags, log.posterior.mode = lpm, 
+                 reordering = r, theta.tags = tags, log.posterior.mode = lpm, correct.value = correct.value, 
                  stdev.corr.negative = stdev.corr.negative, stdev.corr.positive = stdev.corr.positive,
-                 to.theta = theta.to, from.theta = theta.from, mode.status = mode.status, 
+                 to.theta = theta.to, from.theta = theta.from, gmode.status = mode.status, 
                  lincomb.derived.correlation.matrix = lincomb.derived.correlation.matrix,
                  lincomb.derived.covariance.matrix = lincomb.derived.covariance.matrix,
                  configs = configs))
diff -r 5a818c2923fb rinla/R/hyperpar.R
--- a/rinla/R/hyperpar.R	Fri Jan 30 22:44:15 2015 +0000
+++ b/rinla/R/hyperpar.R	Fri Feb 06 22:20:34 2015 +0100
@@ -112,6 +112,7 @@
     result.tmp$.args$control.inla$print.joint.hyper = TRUE
     result.tmp$.args$control.inla$force.diagonal = TRUE
     result.tmp$.args$control.inla$adjust.weights = FALSE
+    result.tmp$.args$control.inla$correct.value = result.tmp$misc$correct.value
     
     result.tmp$.args$control.results$return.marginals.random = FALSE
     result.tmp$.args$control.results$return.marginals.predictor = FALSE
diff -r 5a818c2923fb rinla/R/sections.R
--- a/rinla/R/sections.R	Fri Jan 30 22:44:15 2015 +0000
+++ b/rinla/R/sections.R	Fri Feb 06 22:20:34 2015 +0100
@@ -702,6 +702,7 @@
         stopifnot(inla.spec$correct.factor > 0);
         cat("correct.factor = ", inla.spec$correct.factor, "\n", file = file, append = TRUE)
     }
+    cat("correct.value = ", inla.spec$correct.value, "\n", file = file, append = TRUE)
     if (!is.null(inla.spec$correct.strategy)) {
         cat("correct.strategy = ", inla.spec$correct.strategy,"\n", sep = " ", file = file,  append = TRUE)
     }
diff -r 5a818c2923fb rinla/R/set.default.arguments.R
--- a/rinla/R/set.default.arguments.R	Fri Jan 30 22:44:15 2015 +0000
+++ b/rinla/R/set.default.arguments.R	Fri Feb 06 22:20:34 2015 +0100
@@ -476,11 +476,14 @@
         correct = FALSE,
 
         ##:ARGUMENT: correct.factor Factor used in adjusting the correction factor (default=1) if correct=TRUE
-        correct.factor = 10.0,
+        correct.factor = 1.0,
 
         ##:ARGUMENT: correct.strategy  The strategy used to compute the correction; one of 'simplified.laplace' (default) or 'laplace'
         correct.strategy = "simplified.laplace", 
 
+        ##:ARGUMENT: correct.value  The value of the correction at the mode. Only used if the mode is known
+        correct.value = 0.0, 
+
         ##:ARGUMENT: correct.verbose  Be verbose when computing the correction?
         correct.verbose = FALSE)
  
@@ -493,7 +496,6 @@
     return (ans)
 }
 
-
 `inla.set.control.predictor.default`=
     function(...)
 {
