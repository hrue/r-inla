/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PACKAGE "fmesher"
#endif

#ifndef CMDLINE_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PACKAGE_NAME "fmesher"
#endif

#ifndef CMDLINE_VERSION
/** @brief the program version */
#define CMDLINE_VERSION "0.0.1-1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * config_arg;	/**< @brief Path to config file.  */
  char * config_orig;	/**< @brief Path to config file original value given at command line.  */
  const char *config_help; /**< @brief Path to config file help description.  */
  int boundary_flag;	/**< @brief Handle triangulation boundary (default=off).  */
  const char *boundary_help; /**< @brief Handle triangulation boundary help description.  */
  int interior_flag;	/**< @brief Handle interior triangulation constraints (default=off).  */
  const char *interior_help; /**< @brief Handle interior triangulation constraints help description.  */
  int fem_arg;	/**< @brief Calculate FEM matrices up to order fem (default='4').  */
  char * fem_orig;	/**< @brief Calculate FEM matrices up to order fem original value given at command line.  */
  const char *fem_help; /**< @brief Calculate FEM matrices up to order fem help description.  */
  double* cet_arg;	/**< @brief Convex encapsulation parameters.  */
  char ** cet_orig;	/**< @brief Convex encapsulation parameters original value given at command line.  */
  unsigned int cet_min; /**< @brief Convex encapsulation parameters's minimum occurreces */
  unsigned int cet_max; /**< @brief Convex encapsulation parameters's maximum occurreces */
  const char *cet_help; /**< @brief Convex encapsulation parameters help description.  */
  double* rcdt_arg;	/**< @brief RCDT, with optional quality parameters.  */
  char ** rcdt_orig;	/**< @brief RCDT, with optional quality parameters original value given at command line.  */
  unsigned int rcdt_min; /**< @brief RCDT, with optional quality parameters's minimum occurreces */
  unsigned int rcdt_max; /**< @brief RCDT, with optional quality parameters's maximum occurreces */
  const char *rcdt_help; /**< @brief RCDT, with optional quality parameters help description.  */
  double x11_arg;	/**< @brief Show progress in an x11 window, with delay factor (default='1.0').  */
  char * x11_orig;	/**< @brief Show progress in an x11 window, with delay factor original value given at command line.  */
  const char *x11_help; /**< @brief Show progress in an x11 window, with delay factor help description.  */
  int __ascii_input_flag;	/**< @brief Text file input (default=off).  */
  const char *__ascii_input_help; /**< @brief Text file input help description.  */
  int __ascii_output_flag;	/**< @brief Text file output (default=off).  */
  const char *__ascii_output_help; /**< @brief Text file output help description.  */
  int have_triangulation_flag;	/**< @brief The input already contains a tringulation (default=off).  */
  const char *have_triangulation_help; /**< @brief The input already contains a tringulation help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int boundary_given ;	/**< @brief Whether boundary was given.  */
  unsigned int interior_given ;	/**< @brief Whether interior was given.  */
  unsigned int fem_given ;	/**< @brief Whether fem was given.  */
  unsigned int cet_given ;	/**< @brief Whether cet was given.  */
  unsigned int rcdt_given ;	/**< @brief Whether rcdt was given.  */
  unsigned int x11_given ;	/**< @brief Whether x11 was given.  */
  unsigned int __ascii_input_given ;	/**< @brief Whether --ascii-input was given.  */
  unsigned int __ascii_output_given ;	/**< @brief Whether --ascii-output was given.  */
  unsigned int have_triangulation_given ;	/**< @brief Whether have-triangulation was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_ext() instead
 */
int cmdline2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_print_help(void);
/**
 * Print the version
 */
void cmdline_print_version(void);

/**
 * Initializes all the fields a cmdline_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_params_init(struct cmdline_params *params);

/**
 * Allocates dynamically a cmdline_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_params structure
 */
struct cmdline_params *cmdline_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_config_file() instead
 */
int cmdline_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
