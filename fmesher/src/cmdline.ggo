package "fmesher"
version "unknown"
purpose "Generate triangular meshes and prepare finite element calculations"

description "Examples:

Build a refined triangulation from a set of points stored in prefix.s0:
  fmesher -Ts0 -R prefix.
  fmesher -Ts0 -R prefix. output.
  fmesher collect=-,s,tv prefix.
The output is stored in prefix.s and prefix.tv (and other prefix.* files)
or output.s and putput.tv (in the second version).
In the third version, only the s and tv matrices are output, thus
excluding any other output matrices.

Join separate matrix files into collection files:
  fmesher --collect=s0,s,tv,tt,tti,vv prefix. --oc=graph.col
  fmesher --collect=c0,c1,g1,g2 prefix. --oc=fem.col

Extract all matrices from two collection files graph.col and fem.col:
  fmesher --collect=-- --ic=graph.col,fem.col - prefix.

--collect=- outputs all files activated by the program, but since
we are only interested in extracting all the matrices,
--collect=-- indicates that all matrices should be read, regardless of
whether they are needed or not.
The `-' at the end indicates that no prefix-input is used, only output.
To completely disable prefix I/O, omit the prefixes completely, or
specify `-' or `- -'

Convert a raw ascii matrix from stdin to fmesher format:
  fmesher --ir=s0,ddgr,- -R - prefix. < S0.dat
  fmesher --ir=s0,ddgr,S0.dat -R --collect=s0 - prefix.
  fmesher --ir=s0,ddgr,S0.dat --collect=-,s0 - prefix.
In all cases, s0 is read from S0.dat
In the first example, s0 is used for triangulation, but not output.
In the second example, s0 is used for triangulation, and added to the output.
In the third and fourth example, only s0 is output, and no triangulation made."

option "config" C "Read options from file" string typestr="FILE" optional
option "dump-config" - "Dump options to file" string typestr="FILE" optional


section "I/O options"
option "io" - "I/O format specification (ascii/binary)" enum optional
       values="aa","ab","ba","bb" default="bb" typestr="SPEC"
#option "ip" - "Read input from multiple files with the given prefix" string
#       typestr="PREFIX" optional
#option "op" - "Write output to multiple files with the given prefix" string
#       typestr="PREFIX" optional
option "ic" i "Read input as matrix collections in the given files" string
       multiple typestr="FILE" optional
option "oc" o "Write output as a matrix collection in the given file" string
       typestr="FILE" optional
option "collect" - "Add named matrices to the output collection" string
       typestr="NAME" multiple default="-" optional
       details="
If only `-' is specified, all loaded matrices are added.
If `-' is followed by other names, only those will be added.\n"
option "collect-all" -
       "With --collect=-, load all matrices from the input collections"
       flag off dependon="collect"
option "ir" - "Import a raw matrix file in ascii format"
       string typestr="SPEC" multiple
       details="
First SPEC is the name of the matrix
Second SPEC is a four letter matrix specification:
       d/s = dense/sparse
       i/d = int/double
       g/s/d = general/symmetric/diagonal
       r/c = row/column major storage
       Common format for point lists with one point per line = ddgr
Third SPEC the filename, - for standard input\n"
       optional


section "Triangulation options"
option "input" T "Specify triangulation input data, default=s0.  A second name indicates a pre-existing triangulation, as in -Ts0,tv0, further indicates additional data point matrices.  Use - for tv0 to only supply additional points."
       string typestr="NAME" multiple(1-) optional
option "cutoff" - "Treat points in the input data as unique only if they are further apart than this value. The vector 'idx' in the output gives the resulting vertex index for each input point." double typestr="DISTANCE"
       default="1.0e-12" optional
option "spheretolerance" - "The tolerance for determining that the input lies on a sphere." double typestr="DISTANCE"
       default="1.0e-7" optional
option "cet" E "Convex encapsulation parameters" double typestr="PARAM"
       multiple(1-2) optional
       details="\n\tThe parameters are n,m, where n is the number of sides of the encapsulation, and m is the margin.
\tFor m>0, the margins are set to m.
\tFor m<0, the margins are set to approximately -m*diam.
\tDefaults are 8,-0.1, adding 10% on all sides\n"
option "rcdt" R "Generate RCDT, with optional quality parameters" double
       typestr="PARAM"
       multiple argoptional default="21" optional
       details="\n\tThe parameter order is min_angle, max_edge_length for added points, max_edge_length for data points. Further values apply to data points added by extra matrices specified with -T|--input
\tWhen negative values for the edge_length-parameters, a rudimentary
scaling with respect to the initial point density is used.
\tPositive values are absolute.
\tThe algorithm is only guaranteed to converge for min_angle<=21, but values as high as 34 often work in practice.
\tDefaults are 21,-1.,-0.5\n"
option "max_n0" - "The desired maximal number of vertices, terminating angle checks" int typestr="PARAM" default="-1" optional
option "max_n1" - "The desired maximal number of vertices, terminating edge length checks" int typestr="PARAM" default="-1" optional
option "quality" Q "Per vertex RCDT parameters, as one or more one-column matrices with minimum edge lengths for the points specified with -T|--input" string
       typestr="NAME"
       multiple optional dependon="rcdt"
option "boundary" B "Handle triangulation boundary" string typestr="NAME"
       multiple default="boundary0" optional
option "interior" I "Handle interior constraints" string typestr="NAME"
       multiple default="interior0" optional
option "boundarygrp" - "Group lables for boundary segments" string typestr="NAME"
       multiple optional
option "interiorgrp" - "Group lables for interior segments" string typestr="NAME"
       multiple optional
option "globe" - "Construct a triangulation of a globe" int typestr="SUBSEGMENTS" optional

section "SMORG options"
option "smorg" - "Smorgasbord queries for a known triangulation.  Uses the given --input=s,tv directly, without any filtering or refinement." optional
option "fem" - "Calculate FEM matrices up through order fem" int typestr="ORDER"
       default="-1" optional
option "aniso" - "Calculate anisotropic Laplacians" string typestr="NAME"
       multiple(2) optional
option "grad" - "Calculate gradient weight matrices" optional
option "sph0" - "Calculate rotationally invariant spherical harmonics up through order sph0" int typestr="ORDER"
       default="-1" optional
option "sph" - "Calculate spherical harmonics up through order sph" int typestr="ORDER"
       default="-1" optional
option "bspline" - "Calculate rotationally invariant B-spline basis functions" double typestr="PARAM"
       multiple(1-3) optional
option "points2mesh" - "Calculate barycentric triangle coordinates for a set of points" string typestr="NAME"
       default="s" optional
option "splitlines" - "Split line segments into within-triangle parts and calculate corresponding barycentric coordinates" string typestr="NAME"
       multiple(2) optional

section "Miscellaneous options"
option "x11" x "Show progress in an x11 window, with delay factor" double
       typestr="DELAY"
       argoptional default="1.0" optional
option "x11-zoom" - "Zoom into a smaller section of the graph, [minx,maxx,miny,maxy]" double
       typestr="LIMITS" multiple(3-4)
       optional dependon="x11" hidden



# ./fmesher --ir=s0,ddgr,koala-posisions.txt --ir=bnds0,ddgr,koala-boundary.txt --ir=bnd0,digr,koala-bnd0.txt --io=aa --oc=test.col --collect=s0 -x -Ts0,-,bnds0 -Bbnd0 -R
# ./fmesher --ic=koala.col -Ts0,-,bnds0 -Bbnd0 - -R -x
