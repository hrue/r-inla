   domin's user guide

   copyright: prof. dr. p. spellucci, thd fb4 ag8
	      e-mail: spellucci@mathematik.th-darmstadt.de

   purpose:
   find a (local) minimizer of a real (two times differentiable) function
   f. a modified version of the bfgs-method is used with control of
   scaling and conditioning. updating of a cholesky decomposition of the
   quasi-newton matrix is done. the method performes quite well, provided
   the hessian of f is sufficiently positive definite at the solution.
   however f need not be convex.
   complexity: in almost every case 30n steps are sufficient to obtain full
   limiting precision. each step requires about 2 to 3 function and 1
   gradient value of f. algebraic complexity is O(n*n) per step.
   therefore normally the total complexity is O(n*n*n).

   usage:

       call domin

   the user has to define f by a subroutine f. he also has to supply
   an initial guess and some parameters as shown in the file
   dominusrfc.f. at least the following must be given:
   subroutine setup, f, gradf.

   within setup (no parameters):
   n:   number of variables . n<= 300 presently
   ident: problem identifier. 80 characters maximum. the first four have
	  to be alphanumeric, the first one alphabetic.
   cold:  if true, the minimizer uses a cold start, i.e. initialization of
	  an estimated hessian  by a suitable  multiple of the unit
	  matrix and initialization of x by the user defined xst. otherwise
	  these data are taken from the previous run.
	  on occasion of the first call to domin, cold must be true of
	  course.
   analyt: if set to true, the user has to code the gradient of f within
	  the subprogram gradf. otherwise domin uses an internally defined
	  high precision numerical differentiation scheme.
	  the user may supply gradf with an empty body then. however she(he) is
	  warned that using this possibility may be quite costly, since
	  domin uses 6n function values regardless of the structure of f
	  for any one gradient value.
   xst(i),i=1,...n: initial guess for solution.

   other parameters of domin may be changed at users will within setup.
   she(he) however is warned to do so without having intimate knowlegde
   of the underlying method.
   the structure and meaning of domin's public datablocks are shown below.
   they are accessible through domincommon.f. the user simply may include
   that within here(his) code.

   the subroutine f must have the following calling sequence:
   f(x,fx,err).
   x:     real*8 x(*)    argument of f
   fx:    real*8         function value returned
   err:   logical        an indicator whether or not an error occured
			 in evaluating f at x. since domin changes x and
			 necessarily is unaware of the range of definition
			 of f, such a change may result in an argument
			 outside the range of definiton of f. the user
			 may check this and return err=.true. then. domin
			 will decrease the change of x then and try again.

   the calling sequence of the subroutine gradf is
   gradf(x,gradx,err)
   x,gradx:    real*8 x(*),gradx(*)
   err:        logical
	       with the obvious meaning. see f.

!!!   restrictions applying to the user's environment:
!!!   the user must not use any variable name beginning with domin_ in
!!!   his load module.
!!!   he must not use fortran unit 10, since this is used by domin for
      output.
!!!   warning: the user cannot change parameters of dominparam.f without
!!!   having domin.o recompiled

   output of domin:
   of course the user may access the solution via
   domin's common blocks. he may then issue a restart of domin with
   cold=.false. after e.g. supplying a good hessian , modifying x or f
   and so on.

   additionally domin gives the results of its run in the file
   domin//ident(1:4)//.res using fortran unit 10. these results are
   selfexplaining with the exception of termination reason. its meaning is
   -3:      any possible change of x defined within domin leads outside the 
            range of
	    definiton of f, i.e. the users functions return err=.true.
   -2:      more than itermax steps .
	    presently itermax is set to maxit = 3000 if not changed by the
	    user. such large a number of steps normally will result from
	    a severe illconditioning of the problem. rather than increasing
	    itermax the user first should check his problem against e.g. bad 
	    scaling or redundant variables, which would make the hessian 
            singular.
   -1:      no acceptable stepsize can be found which decreases f.
	    this will normally result from an insufficient precision in
	    evaluating f or gradf , not compatible with domin's internal
	    setting of termination criteria, or otherwise from an extreme
	    illconditioning of the hessian. nevertheless x may be useful.
   0:       norm(d)=0. no change in x possible. (the current gradient is
	    zero or the solution of the quasi-newton-system results in
	    underflow, which means that the gradient is extremely small)
   1:       sufficient precision obtained
	    termination criteria are :
	    change in x (with stepsize 1) <= epsx*(norm(x)+1)
	    norm(grad_f(x)) <=
	      max{epsg,macheps*condition number of estimated hessian}
	    standard setting of epsx and epsg is macheps**(2/3).
   2:       directional derivative d(transpose)*grad is in the roundoff
	    level of evaluating f. normally a good solution is found, but
	    other termination criteria do not apply ( f is "flat")
   3:       over more than 4 steps were has been almost no change in f.
	    continuing the computation makes no sense seemingly.

   in case of a failure a short form protocol of the complete run is
   appended, which makes possible an analysis of the underlying problem.
   a description of this output is given below.
   it :     step number ,
   f :      function value,
   delx :   norm(xnew-xold)
   ngrad :  norm(gradient(f(x))),
   n(a):    norm of updated quasi-newton matrix (estimated hessian)
   thet2:   modification parameter of update vector y=grad_new-grad_old.
	    if much smaller than one, f is highly nonconvex. solution method
	    may be inefficient then.
   dirder:  directional derivative d(transpose)*grad
   cond:    upper bound for condition number of quasi-newton update
	    computed from trace(a)*trace(a**(-1))
   sig :    stepsize. if much smaller than one x may be far from the solution
	    or the hessian estimate inadequate.
   dskal:   internal rescaling of direction avoiding large changes in x.
   n(d):    norm(d), d=computed direction of change of x.
   icf+ :   number of function evaluations to compute sig
	    should range from 1 to 3. icf+ large means d inadequate and
	    therefore the updated hessian inadequate.
   restart: if equal one, an initialization of the quasi-newton update
            with a multiple of the identity took place this step.
   update : if equal -1 ,then the update has been suppressed this step

   in the final statistics 'updates' means the number of quasi-newton
   updates, 'noupdates' the number of its suppression, 'restarts' the
   number of fresh initializations with a multiple of the identity
   and 'modsteps' the number of modified updates (following powell's
   device).

   the user may obtain more detailed information by setting of the
   testi-variables:
   test1= .true. : the short protocol is given in any case
   test2= .true. : a detailed protocol of the run is given in the res-file
   test3= .true. : the quasi-newton matrix is written in the res-file
   test4= .true. : a one-line-information is given on unit * for every step

   domin's common blocks are listed in the following

      implicit none
      include 'dominparam.f'
c  x=current solution, d=direction , gradx=gradient of f at x
c  x0,d0,gradx0 : the same for the previous step
      real*8 x,d,gradx,fx,xnorm,dnorm,sig,x0,d0,gradx0,fx0,x0norm,
     1       d0norm,sig0,difx,ftest,dirder
      common/domin_xdat/x(nx),d(nx),gradx(nx),fx,xnorm,dnorm,sig,
     1          x0(nx),d0(nx),gradx0(nx),fx0,x0norm,d0norm,sig0,
     2          difx(nx),ftest,dirder
c  sigsm=smallest acceptable stepsize, sigla largest one
      real*8 stepterm,sigsm,sigla,alpha,beta,delta,theta,dskal
      common/domin_stepparam/stepterm,sigsm,sigla,alpha,beta,delta,
     1               theta,dskal
c  epsx=desired precision in x, epsg=desired precision in gradx,
c  epsf = roundoff level in evaluating f (relative)
c!!!!! if the internal differentiation scheme is used, epsx should be
c      in the order of (precision in f)*10**3 approximately (or larger)
c      if the user computes the gradient itself epsx should be not smaller
c      than (precision in grad_computed) * 10.
c      therefore the final precision of the result is severely influenced
c      by the precision of the computed gradient
      real*8 epsx,epsg,epsf
c variables determining form of output and starting procedure (see above)
      logical test1,test2,test3,cold,test4
      common/domin_param/epsx,epsg,epsf,test1,test2,test3,test4,cold
c epsmach=machine precision (computed automastically), tolmach=underflow
c level, deldif = stepsize for internal numerical differentiation
c do not change these parameters
      real*8 epsmach,tolmach,deldif
      common/domin_mach/epsmach,tolmach,deldif
      integer n
      common/domin_dim/n
      integer icf,icgf,iup,inoup,ires,imod
      common/domin_count/icf,icgf,iup,inoup,ires,imod
c  a=quasi newton update, a0 = old one (for small n only)
c  diaga= diagonal of a. the upper triangle of a holds the cholesky-factor
c  tracea=trace(a), traceb=trace(a**(-1))
      real*8 a,a0,diaga0,diaga,z,y,tracea,traceb,accinf
      common/domin_bfgsdat/a(nx,nx),diaga(nx),a0(nsmall,nsmall),
     1               diaga0(nsmall),accinf(maxit,14),z(nx),y(nx)
     2               ,tracea,traceb
      logical analyt
      common/domin_gradinf/analyt
      real*8 eta,thet2,bfgsterm
      integer niter,itermax
      common/domin_bfgsparam/niter,itermax,eta,thet2,bfgsterm
c  user defined initial guess xst
      real*8 xst
      common/domin_xst/xst(nx)
c user defined ident name
      character*80 ident
      common/domin_ident/ident

      standard initialization of domin follows

      test1=.false.
      test2=.false.
      test3=.false.
      test4=.false.
      epsx=epsmach**(2.d0/3.d0)
      epsg=epsx
      epsf=epsmach*1.d3
      eta=epsmach**.5d0
      sigsm=epsx
      sigla=2048.d0
      beta=2.d0
      alpha=.1d0
      delta=.01d0
      theta=.99d0
      deldif=dexp(dlog(epsmach)/7.d0)*.25d0
      itermax=maxit

      an example of an users routine is included and may be copied from
      dominusrfc.f

c*********** this gives the minimal user environment for running domin
c     as example the rosenbrock function is coded here
c     main
      call domin
      stop 'done'
      end
      subroutine setup
      include 'domincommon.f'
      integer i
      real*8 uxst(nx)
c  define your initial guess here. of course you may read it from some file
      data ( uxst(i),i=1,2)/-1.d0,-1.d0/
      ident='rosenbrockvalley'
      n=2
      cold=.true.
      analyt=.false.
c  uses domin's internal numerical differentiation feature.
c  if differentiation is easy, you should set analyt=.true. and fill up
c  the routine grad below
      do i=1,n
      xst(i)=uxst(i)
      enddo
      return
      end
c*************************
      subroutine f(x,fx,err)
      real*8 x(*),fx
      logical err
      integer cf,cg,cu,csu,cre,cm
      common/domin_count/cf,cg,cu,csu,cre,cm
      err=.false.
      cf=cf+1
c  if fx cannot be evaluated safely for the given x, you should set
c  err=.true. and return immediately
      fx=100.d0*(x(2)-x(1)**2)**2+(1.d0-x(1))**2
      return
      end
c*******************************************************************
      subroutine gradf(x,gradx,err)
      implicit none
      logical err
      real*8 x(*),gradx(*)
      err=.false.
      return
c   analytical derivatives not given
      end


