#include <assert.h>
#include <math.h>
#include <string.h>
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include "GMRFLib/GMRFLib.h"                      /* include definitions of GMRFLib */

#define Uniform  (*GMRFLib_uniform)               /* use the RNG in GMRFLib. return Unif(0,1)'s */
#define MIN(a,b) ((a) < (b) ? (a) : (b))          /* MIN macro */

typedef struct                                    /* the type holding the data */
{
    double *y,  *n;                               /* observed counts and number of days */
}
data_tp;

double link(double x)                   
{                                                 /* the link function */
    return exp(x)/(1+exp(x));
}
double log_gamma(double x, double a, double b)
{                                   /*  return the log density of a gamma variable with mean a/b. */
    return ((a-1.0)*log(x)-(x)*b);  
}
double Qfunc(int i,  int j, void *kappa)
{
    return *((double *)kappa) * (i==j ? 2.0 : -1.0);
}
int gi(double *gis, double *x_i, int m, int idx, double *not_in_use, void *arg)
{
    /* compute g_i(x_i) for m values of x_idx: x_i[0], ..., x_i[m-1]. return its values in gis[0],
     * ..., gis[0]. additional (user) arguments are passed through the pointer gi_arg, here, the
     * data itself. */ 
    int k;
    double p;
    data_tp *data;
    data = (data_tp *) arg;
    for(k=0; k<m; k++)
    {
        p      = link(x_i[k]);
        gis[k] = data->y[idx]*log(p) + (data->n[idx] - data->y[idx])*log(1.0-p);
    }
    return 0;
}
int main(int argc, char **argv)
{
    assert(argv[1]);
    (*GMRFLib_uniform_init)(atoi(argv[1])); /* init the RNG with the seed in the first argument */

    GMRFLib_graph_tp *graph;                      /* pointer to the graph */
    int n         = 366;                          /* size of the graph for the Tokyo example */
    int bandwidth = 1;                            /* the bandwidth is 1 for RW1 */
    int cyclic    = GMRFLib_TRUE;                 /* cyclic graph */
    GMRFLib_make_linear_graph(&graph, n, bandwidth, cyclic); 

    GMRFLib_constr_tp *constr = NULL;             /* no constraints */
    double *d, *mean=NULL, *b=NULL, *c=NULL;      /* various vectors some are NULL */
    char *fixed = NULL;                           /* none x_i's are fixed */

    data_tp data;                                 /* hold the data */
    data.y = calloc(n, sizeof(double));           /* allocate space */
    data.n = calloc(n, sizeof(double));           /* allocate space */
    
    FILE *fp; int i;                              /* read data */
    fp = fopen("tokyo.rainfall.data.dat",  "r"); assert(fp);
    for(i=0;i<n;i++) fscanf(fp, "%lf %lf\n", &data.y[i],  &data.n[i]);
    fclose(fp);

    double *x_old,  *x_new, kappa_old=100.0, kappa_new; /* old and new (the proposal) x and kappa */
    x_old = calloc(n, sizeof(double));            /* allocate space */
    x_new = calloc(n, sizeof(double));            /* allocate space */

    d = calloc(n, sizeof(double));                /* allocate space */
    for(i=0;i<n;i++) d[i] = 1.0;                  /* all are equal to 1 */
    
    while(1)
    {                                             /* just keep on until the process is killed */
        kappa_new = GMRFLib_scale_proposal(6.0)*kappa_old;
        double log_accept;                        /* GMRFLib_blockupdate does all the job... */
        GMRFLib_blockupdate(&log_accept, x_new,  x_old, b, b, c, c, mean, mean, d, d,
                            gi, (void *) &data, gi, (void *) &data, 
                            fixed, graph, Qfunc, (void *)&kappa_new, Qfunc, (void *)&kappa_old, NULL, NULL, NULL, NULL, 
                            constr, constr, NULL, NULL);

        double A = 1.0,  B = 0.000289;            /* prior parameters for kappa */
        /* add terms to the acceptance probability not computed by GMRFLib_blockupdate: prior for
         * kappa and the normalising constant. */ 
        log_accept += ((n-1.0)/2.0*log(kappa_new) + log_gamma(kappa_new, A,  B))
            - ((n-1.0)/2.0*log(kappa_old) + log_gamma(kappa_old, A,  B));
        
        static double p_acc = 0.0;           /* sum of the accept probabilities */
        double acc_prob = exp(MIN(log_accept, 0.0));
        p_acc += acc_prob;
        if (Uniform() < acc_prob)
        {                                         /* accept the proposal */
            memcpy(x_old, x_new, n*sizeof(double));
            kappa_old = kappa_new;
        }
        static int count = 0;                     /* number of iterations */
        if (!((++count)%10))                      /* output every 10th */
        {
            if (0) printf(" %.3f", kappa_old);
            if (0) for(i=0;i<n;i++) printf(" %.3f", link(x_old[i]));
            printf("\n"); fflush(stdout);
            fprintf(stderr, "mean accept prob %f\n", p_acc/count); /* monitor the mean accept probability */
        }
    }
    return(0);
}

