#!/bin/bash

cmd=$(readlink -e "$0")
DIR=$(dirname "$cmd")
tmp=$(basename "$0")
prog=${tmp%%.run}

DR=""
if [ ! -z ${R_HOME+x} ]; then 
    d="$R_HOME/lib"
    if [ -d "$d" ]; then
	DR=$d
    fi
fi

D=""
for d in {,/usr}/lib64 /usr/lib64/R/lib {,/usr}/lib/x86_64-linux-gnu {,/usr}/lib; do
    if [ -d "$d" ]; then
	if [ -z "$D" ]; then
	    D="$d"
	else
	    D="$D:$d"
	fi
    fi
done

if [ -n "${INLA_NATIVE_LD_LIBRARY_PATH}" ]; then
    ## so we can revert back to old behaviour
    export LD_LIBRARY_PATH="$DIR/first:$D:$DIR:$LD_LIBRARY_PATH"
else
    ## this is the new default, is that we use the libs used when we
    ## build. Try to use libR from system by default
    export LD_LIBRARY_PATH="$DIR/first:$DR:$DIR:$D:$LD_LIBRARY_PATH"
fi

export OMP_SCHEDULE=STATIC
##export OMP_PROC_BIND=FALSE
##export OMP_WAIT_POLICY=ACTIVE
export PARDISOLICMESSAGE=1

if [ -n "${INLA_MALLOC_LIB}" ]; then
    if [ -f "${INLA_MALLOC_LIB}" ]; then
	export LD_PRELOAD="${INLA_MALLOC_LIB}:$LD_PRELOAD"
    else   
	for nm in ${INLA_MALLOC_LIB}; do
	    for f in $DIR/malloc/lib*.so*; do
		case "$f" in
		    $DIR/malloc/lib${INLA_MALLOC_LIB}malloc.so*)
			export LD_PRELOAD="$f:$LD_PRELOAD";;
		esac
	    done
	done
    fi
    case "$LD_PRELOAD" in
	*libjemalloc*) 
	    export MALLOC_CONF='abort_conf:true,background_thread:true,metadata_thp:always';;
    esac
fi

if [ -n "${INLA_DEBUG}" ]; then
    for var in $(set | grep ^INLA_); do
	echo "*** $0 *** $var"
    done
    echo "*** $0 *** MALLOC_CONF=$MALLOC_CONF"
    echo "*** $0 *** LD_PRELOAD=$LD_PRELOAD"
    echo "*** $0 *** LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
    ldd -r "$DIR/$prog"
fi

## set default levels for nested openmp
nt="-t$(nproc):1"
for arg in "$@"; do 
    case "$arg" in
	-t*) nt="$arg";;
    esac
done
eval $(echo $nt | awk -v nproc=$(nproc) -F: '{gsub(/^-t/,""); nt=1*$2; if (nt < 0) nt=-nt; if ($1*1 == 0) $1=nproc; if (nt==0) nt=1; print "export OMP_NUM_THREADS=" $1 "," nt ";"; al=1; if(nt>1) al=2; print "export OMP_MAX_ACTIVE_LEVELS=" al ";"}')
if [ -n "${INLA_DEBUG}" ]; then
    set | grep ^OMP_ | while read v; do echo "*** $0 *** $v"; done
    echo " *** $0 *** exec $DIR/$prog $@"
fi

exec "$DIR/$prog" "$@"
