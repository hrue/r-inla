\documentclass[a4paper,11pt]{article} 

\usepackage[margin={2cm,2cm}]{geometry} 
\usepackage{multicol} 

\title{\vspace{-2cm}How to fit a \textbf{SPDE} model 
  in \textbf{\textsf{INLA}}, on few pages} 
\author{Elias T. Krainski and H{\aa}vard Rue} 

\begin{document} 

\maketitle 

\vspace{-1cm}
\begin{center}\begin{minipage}[c]{0.9\textwidth}\centering
This work shows quickly how to do a 
geostatistical fully Bayesian analysis
through the \textbf{S}tochastic \textbf{P}artial 
\textbf{D}iferential \textbf{E}quation 
approach, \cite{lindgrenRL:2011}, 
with \textbf{I}ntegrated \textbf{N}ested 
\textbf{L}aplace \textbf{A}proximation, 
\cite{rueMC:2009}, 
using the \textbf{\textsf{INLA}} package, 
\texttt{http://www.r-inla.org}.
\end{minipage}\end{center}

<<setting,include=FALSE>>= 
set.seed(1) 
knit_hooks$set(pars = function(before, options, envir) {
    if (before) graphics::par(options$pars)
}) 
library(lattice);   library(gridExtra);  library(INLA);  library(plyr) 
inla.setOption(inla.call='remote') 
@ 

\begin{multicols}{2} 

\section{Data simulation} 

\textbf{Locations} and the Random 
Field (RF) \textbf{covariance} matrix, 
exponential correlation function 
<<locations,tidy=FALSE>>=
n = 200; coo = matrix(runif(2*n), n) 
k <- 10;   s2x <- 0.7 ## RF params.
R <- s2x*exp(-k*as.matrix(dist(coo))) 
@ 

\textbf{RF} sample, a multivariate Normal realization 
  
<<rmvnorm,tidy=FALSE>>=
x <- drop(rnorm(n)%*%chol(R)) 
@ 

Add a covariate effect and a noise 
<<noise,tidy=FALSE>>=
u <- runif(n);  beta <- 1:2;  s2e <- 0.3 
lin.pred <- beta[1] + beta[2]*u + x 
y <- lin.pred + rnorm(n, 0, sqrt(s2e)) 
@ 

\section{Model fitting: steps} 

1. \textbf{Mesh:} 
  a triangulation ($m$ nodes) to 
  random field (RF) discretization. 
  It need triangles within and outer domain. 
  Is good to have they aproximately isosceles and 
  the inner ones with edge length less than 
  the process range.
<<fmesh, tidy=FALSE, pars=list(mar=c(0,0,0.7,0)), out.width='0.35\\textwidth', fig.align='center'>>=
mesh <- inla.mesh.2d(
    coo, ## provide locations or domain
    max.edge=c(1/k, 2/k), ## mandatory 
    cutoff=0.1/k) ## good to have >0
plot(mesh, asp=1);  points(coo, col='red')
@ 

2. \textbf{Define the $n\times m$ projector matrix} to project 
  the process at the mesh nodes to locations 
<<projector, tidy=FALSE>>=
A <- inla.spde.make.A(mesh=mesh, loc=coo) 
@ 

3. \textbf{Build the SPDE model} on the mesh.
Exponential correlation function, $\alpha=3/2$ 

<<spde,tidy=FALSE>>=
spde <- inla.spde2.matern(
    mesh=mesh, alpha=1.5) 
@ 

4. \textbf{Create a stack data} for the estimation 
<<stack-estimation,tidy=FALSE>>=
stk.e <- inla.stack(tag='est', ## tag
    data=list(y=y),  ## response
    A=list(A, 1), ## two projector matrix
    effects=list(## two elements:
        s=1:spde$n.spde, ## RF index
        data.frame(b0=1, ## intercept
                   u=u))) ### covariate
@ 

5. \textbf{Fit} the posterior marginal distributions
  for all model parameters 
<<fitting>>= 
formula <- y ~ 0 + b0 + u + ## fixed part
    f(s, model=spde) ## RF term
res <- inla(formula, 
            data=inla.stack.data(stk.e), 
    control.predictor=list(A = 
        inla.stack.A(stk.e)))# projector
@ 

We have to look at the range ($1/\kappa$) parameter.
If $1/\kappa$ is smaller than the 
edge length of the inner mesh triangles, 
we have to reduce the edges and return to 
first step. Or, the other possibility, 
there is no spatial effect on the data.

\end{multicols} 

\section{Posterior marginal distributions - PMDs} 

Summary of PMDs for the regression coefficients 
<<fixed-summary>>=
round(res$summary.fixed, 4) 
@ 
\hrulefill
\begin{multicols}{2} 
\textbf{\textsf{INLA}} works with precisions. 
We have to transform the precision PMD to have 
variance PMD 
<<posterior-s2e>>=
post.s2e <- inla.tmarginal(# tranf. func.
    function(x) 1/x, ## inversion
    res$marginals.hyperpar[[1]])
@ 

PMD of noise variance is visualized (at right) by
<<fvar, tidy=FALSE, pars=list(mar=c(2.5,2.5,0.1,0.1), mgp=c(1.7,0.5,0)), fig.width=3.5, fig.height=3.5, out.width='0.35\\textwidth', fig.align='center', fig.pos='h'>>=
plot(post.s2e, type='l', ylab='Density', 
     xlab=expression(sigma[y]^2))
abline(v=s2e, col=2)
@ 
\end{multicols} 
\hrulefill
\begin{multicols}{2} 
\textbf{\textsf{INLA}} also works with a 
reparametrization of the RF parameters. 
That is the log of $\kappa$ and the 
log of the local variance, $\tau$ such that 
$\sigma_x^2=1/(2\pi\kappa\phi)$. 
The PMDs on the user scale can be computed 
<<rf>>=
rf <- inla.spde.result(
    inla=res, ## the inla() output
    name='s', ## name of RF index set
    spde=spde, ## SPDE model object
    do.transf=TRUE) ## to user scale
@ 
\end{multicols} 

It can be visualized by 
<<rfpars, pars=list(mfrow=c(1,3), mar=c(2.5,2.5,0.3,0.3), mgp=c(1.5,0.5,0)), fig.width=9, fig.height=3, out.width='0.99\\textwidth', out.height='0.33\\textwidth', fig.align='center', fig.pos='h', fig.keep='last'>>=
plot(rf$marginals.variance[[1]], type='l', 
     xlab=expression(sigma[x]^2), ylab='Density')
abline(v=s2x, col=2) ## add true value
plot(rf$marginals.kap[[1]], type='l',
     xlab=expression(kappa), ylab='Density')
abline(v=k, col=2) ## add true value
plot(rf$marginals.range[[1]], type='l', 
     xlab='range nominal', ylab='Density')
abline(v=sqrt(8)/k, col=2) ## add true value
@

\section{Projection on a grid}

An important result is the map of the 
RF on a grid. 
The simplest way to have it is to define
the projector matrix and project the posterior 
mean and posterior standard deviation on a grid 
<<project-grid>>=
gproj <- inla.mesh.projector(mesh,  xlim=0:1, ylim=0:1, dims=c(200,200))
g.mean <- inla.mesh.project(gproj, res$summary.random$s$mean)
g.sd <- inla.mesh.project(gproj, res$summary.random$s$sd)
@ 

We can visualize it by 
<<fgrid, tidy=FALSE, fig.width=9.7, fig.height=4.5, out.width='0.97\\textwidth', out.height='0.45\\textwidth', fig.pos='h'>>=
library(lattice); library(gridExtra) 
trellis.par.set(regions=list(col=topo.colors(100))) 
grid.arrange(levelplot(g.mean, scales=list(draw=F), xlab='', ylab='', main='mean'), 
             levelplot(g.sd, scal=list(draw=F), xla='', yla='', main='sd'), nrow=1)
@ 

\section{Prediction} 

Define target locations, the corresponding projector 
matrix and covariate values at target locations 
<<target-loc>>=
tcoo <- rbind(c(0.3,0.3), c(0.5,0.5), c(0.7,0.7))
dim(Ap <- inla.spde.make.A(mesh=mesh, loc=tcoo)) 
u.pred <- c(0.5, 0.5, 0.5)
@ 

To make the fully Bayesian analysis, 
we include the target locations on the 
estimation process by assigning NA 
for the response at these locations. 
Defining the prediction stack 
<<prediction-stack>>=
stk.pred <- inla.stack(tag='pred', A=list(Ap, 1), data=list(y=NA), ## response as NA
                       effects=list(s=1:spde$n.spde, data.frame(u=u.pred, b0=1)))
@ 

Fit the model again with the full stack 
<<refit-predict>>=
stk.full <- inla.stack(stk.e, stk.pred) 
p.res <- inla(formula, data=inla.stack.data(stk.full), ## full stack
              control.predictor=list(compute=TRUE, ## compute the predictor
                  A=inla.stack.A(stk.full))) ## using full stack data
@ 

Get the prediction data index and 
collect the PMD to work with 
<<ppost>>=
pred.ind <- inla.stack.index(stk.full, tag='pred')$data
ppost <- p.res$marginals.fitted.values[pred.ind]
@ 

Visualize PMD for the linear predictor at target 
locations with commands bellow
<<ppred, tidy=FALSE, fig.width=9.9, fig.height=3.5, out.width='0.99\\textwidth', out.height='0.35\\textwidth', fig.pos='h', fig.keep='last'>>=
names(ppost) <- seq_along(ppost);     library(plyr) 
xyplot(y~x | .id, ldply(ppost), panel='llines', xlab='y', ylab='Density')
@ 

In \textbf{\textsf{INLA}} we have some functions to work 
with marginals distributions 

<<marginals-funcs>>=
apropos('marginal')
@ 

\begin{multicols}{2} 

<<marginals-examples>>=
inla.mmarginal(ppost[[1]]) ## mode
inla.qmarginal(c(0.15, 0.7), ## quantiles
               ppost[[1]]) 
inla.pmarginal(inla.qmarginal(
    0.3, ppost[[1]]), ppost[[1]]) 
@ 

\bibliographystyle{apalike}
\bibliography{../spde-tutorial}
\end{multicols} 

\end{document}
