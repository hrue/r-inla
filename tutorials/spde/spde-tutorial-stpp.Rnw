<<opts,echo=F,results='hide',message=FALSE,warning=FALSE>>=
library(knitr)
opts_chunk$set(
fig.path='figs/stpp',
message=FALSE, warning=FALSE
)
options(width=75, prompt = " ", continue = "   ")
library(INLA)
lcall <- inla.getOption('inla.call')
## inla.setOption(inla.call='remote')
## inla.setOption(num.threads=4) 
source('R/spde-tutorial-functions.R')
@ 

This content is part of the book available at
\url{http://www.r-inla.org/spde-book},
whose Gitbook version is freely available
along all the code and datasets.

\input{spde-tutorial-burkitt} 

\section{Large point process data set}\label{sec:lstpp} 

This content is part of the book available at
\url{http://www.r-inla.org/spde-book},
whose Gitbook version is freely available
along all the code and datasets. 

In this chapter we show how an approach to fit a 
spatio temporal log-Cox point process model for a large data sets.
We are going to drawn samples from a separable space time intensity function. 
The R source for this file is available at
\url{http://inla.r-inla-download.org/r-inla.org/tutorials/spde/R/spde-tutorial-stpp.R} 

First we define the spatial domain as follows 
<<sdomain>>=
x0 <- seq(0, 4*pi, length=15)
domain <- data.frame(x=c(x0, rev(x0), 0))
domain$y <- c(sin(x0/2)-2, sin(rev(x0/2))+2, sin(0)-2)
@ 
and convert it into the \texttt{SpatialPolygons} class
<<sp>>=
library(sp)
domainSP <- SpatialPolygons(list(Polygons(list(Polygon(domain)), '0')))
@ 

We choose to sample a dataset using the \textbf{\textsf{lgcp}}, 
\cite{taylorDRD:2013}, package as follows
<<lgcp,results='hide'>>=
library(lgcp) 
ndays <- 15
n <- (xyt <- lgcpSim(
    owin=spatstat:::owin(poly=domain), tlim=c(0,ndays), 
    model.parameters=lgcppars(1,0.5,0.1,0,0.5), cellwidth=0.1,
    spatial.covmodel='matern', covpars=c(nu=1)))$n
@ 

In order to fit the model, we do need to define a discretization over space and over time. 
For the time domain, we define a temporal mesh based on a number of time knots:
<<tmesh>>=
k <- 7; tmesh <- inla.mesh.1d(seq(0, ndays, length=k))
@ 
The spatial mesh is defined using the domain polygon:
<<mesh>>=
smesh <- inla.mesh.2d(boundary=inla.sp2segment(domainSP),
                      max.edge=1, cutoff=0.3)
@ 

We can have a look in Figure~\ref{fig:stlppshow} to see a plot of a sample of the data over time, 
the time knots and over space and the spatial mesh as well with the commands below
<<stplot>>=
par(mfrow=c(2,1), mar=c(1.5,0,0,0), mgp=c(1,0.5,0))
plot(sample(xyt$t,500), rep(1,500), type='h', ylim=0:1,
     xlab='Day', ylab='', axes=FALSE); box(); axis(1)
abline(v=tmesh$loc, col=4, lwd=3)
par(mar=c(0,0,0,0))
plot(smesh, asp=1, main='')
points(xyt$x, xyt$y, cex=0.5, pch=3)
@ 
\setkeys{Gin}{width=0.99\textwidth}
\begin{figure}[h]\centering 
<<stfit,echo=FALSE,fig.width=10,fig.height=4>>=
<<stplot>>
@ 
\caption{Time for a sample of the events (black), time knots (blue) in the upper plot. 
 Spatial locations of a sample on the spatial domain (botton plot).}
\end{figure}\label{fig:stlppshow}

\subsection{Space-time aggregation}

For large datasets it can be computationally demanding to fit the model. 
The problem is because the dimention of the model would be $n+m*k$, 
where $n$ is the number of data points, 
$m$ is the number of nodes in the mesh, 
$k$ is the number of time knots. 
In this section we choose to aggregate the data in a way that we have a problem with dimention $2*m*k$. 
So, this approach really makes sence when $n>>m*k$. 

We choose to aggregate the data in accord to the integration points to make the fitting process easier. 
We also consider the dual mesh polygons, 
as shown in Chapter~\ref{ch:lcox}. 

So, firt we find the Voronoi polygons for the mesh nodes
<<voronoi>>=
library(deldir)
dd <- deldir(smesh$loc[,1], smesh$loc[,2])
tiles <- tile.list(dd)
@ 
Convert it into \texttt{SpatialPolygons}:
<<sppls>>=
polys <- SpatialPolygons(lapply(1:length(tiles), function(i)
    { p <- cbind(tiles[[i]]$x, tiles[[i]]$y)
      n <- nrow(p)
      Polygons(list(Polygon(p[c(1:n, 1),])), i)
  }))
@ 

Find to which polygon belongs each data point:
<<ppinsp>>=
area <- factor(over(SpatialPoints(cbind(xyt$x, xyt$y)), 
                    polys), levels=1:length(polys))
@ 
Fint to which part of the time mesh belongs each data point:
<<tnear>>=
t.breaks <- sort(c(tmesh$loc[c(1,k)],
                   tmesh$loc[2:k-1]/2 + tmesh$loc[2:k]/2))
table(time <- factor(findInterval(xyt$t, t.breaks), 
                     levels=1:(length(t.breaks)-1)))
@ 
Use these both identification index sets to aggregate the data
<<agg>>=
agg.dat <- as.data.frame(table(area, time))
for(j in 1:2) ### set time and area as integer
    agg.dat[[j]] <- as.integer(as.character(agg.dat[[j]])) 
str(agg.dat)
@ 

We need to define the expected number of cases (at least) proportional to the area of the Polygons times the width length of the time knots. 
Compute the intersection area of each polygon with the domain (show the sum). 
<<intersect>>=
library(rgeos)
sum(w.areas <- sapply(1:length(tiles), function(i)
    { p <- cbind(tiles[[i]]$x, tiles[[i]]$y)
      n <- nrow(p)
      pl <- SpatialPolygons(list(Polygons(list(Polygon(p[c(1:n, 1),])), i)))
      if (gIntersects(pl, domainSP))
          return(gArea(gIntersection(pl, domainSP)))
      else return(0)
  }))
@ 

A summary of the polygons area is 
<<plarea>>=
summary(w.areas)
@ 
and the area of the spatial domain is 
<<sarea>>=
gArea(domainSP)
@ 
The time length (domain) is 365 and the width of each knot is 
<<wtknot>>=
(w.t <- diag(inla.mesh.fem(tmesh)$c0))
@ 
where the knots at boundary are with less width than the internal ones. 

Since the intensity function is the number of cases per volumn unit, 
with $n$ cases the intensity varies around the average number of cases (intensity) by unit volumn 
<<intensity0>>=
(i0 <- n / (gArea(domainSP) * diff(range(tmesh$loc))))
@ 
and this value is related to an intercept in the model we fit below. 
The space-time volumn (area unit per time unit) at each polygon and time knot is
<<stvol>>=
summary(e0 <- w.areas[agg.dat$area] * (w.t[agg.dat$time]))
@ 

\subsection{Model fit}

The projector matrix, SPDE model object and the space-time index set definition:
<<spde>>=
A.st <- inla.spde.make.A(smesh, smesh$loc[agg.dat$area,],
                         group=agg.dat$time, mesh.group=tmesh)
spde <- inla.spde2.matern(smesh)
idx <- inla.spde.make.index('s', spde$n.spde, n.group=k)
@ 

Defining the data stack
<<stack>>=
stk <- inla.stack(data=list(y=agg.dat$Freq, exposure=e0), 
                  A=list(A.st, 1), 
                  effects=list(idx, 
                      list(b0=rep(1, nrow(agg.dat)))))
@
the formula
<<formula>>=
formula <- y ~ 0 + b0 + 
    f(s, model=spde, group=s.group, control.group=list(model='ar1'))
@ 
and fitting the model
<<fitt>>=
res <- inla(formula, family='poisson', 
            data=inla.stack.data(stk), E=exposure, 
            control.predictor=list(A=inla.stack.A(stk)),
            control.inla=list(strategy='gaussian'))
@ 

The log of the average intensity and the intercept summary:
<<intercept>>=
round(cbind(true=log(i0), res$summary.fixed),4)
@ 
The expected number of cases at each integration point can be used to compute the total expected number of cases
<<n>>=
eta.i <- res$summary.fix[1,1] + res$summary.ran$s$mean
c(n=xyt$n, 'E(n)'=sum(rep(w.areas, k)*rep(w.t, each=smesh$n)*exp(eta.i)))
@

The spatial surface at each time knot can be computed by
<<lstsres>>=
r0 <- diff(range(domain[,1]))/diff(range(domain[,2]))
prj <- inla.mesh.projector(smesh, xlim=bbox(domainSP)[1,], 
                           ylim=bbox(domainSP)[2,], dims=c(r0*200, 200))
g.no.in <- is.na(over(SpatialPoints(prj$lattice$loc), domainSP))
t.mean <- lapply(1:k, function(j) {
    z <- inla.mesh.project(prj, res$summary.ran$s$mean[idx$s.group==j])
    z[g.no.in] <- NA
    return(z)
})
@ 
and is visualized in Figure~\ref{fig:lstppsres} is visualized by
<<lstsresp,eval=FALSE>>=
zlims <- range(unlist(t.mean), na.rm=TRUE)
library(fields)
par(mfrow=c(4,2), mar=c(0.1,0.1,0.1,0.1))
for (j in 1:k) {
    image(prj$x, prj$y, t.mean[[j]], 
          axes=FALSE, zlim=zlims, col=tim.colors(30))
    points(xyt$x[time==j], xyt$y[time==j], cex=0.1)
}
image.plot(prj$x, prj$y, t.mean[[j]]+1e9, axes=FALSE, zlim=zlims, xlab='', 
           legend.mar=10, legend.width=5, col=tim.colors(30), horizontal=T)
@ 
\begin{figure}[h]\centering
<<lstsresf,echo=FALSE,fig.width=5,fig.height=5,out.width='0.97\\textwidth'>>=
<<lstsresp>>
@ 
\caption{Spatial surface fitted at each time knot overlayed 
  by the point pattern formed by the points nearest to each 
  time knot.}
\end{figure}\label{fig:lstppsres}
