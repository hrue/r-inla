\section{Space-time point process: Burkitt example}\label{sec:burkitt}  

In this example we show hot to fit a space-time point process 
using the \texttt{burkitt} dataset from the \pkg{splancs} \pkg{R} package. 
The R source for this file is available at
\url{http://inla.r-inla-download.org/r-inla.org/tutorials/spde/R/spde-tutorial-burkitt.R}

This content is part of the book available at
\url{http://www.r-inla.org/spde-book},
whose Gitbook version is freely available 
along all the code and datasets.


<<opts,echo=F,results='hide',message=FALSE,warning=FALSE>>=
library(knitr)
opts_chunk$set(
fig.path='figs/stpp',
message=FALSE, warning=FALSE
)
options(width=75, prompt = " ", continue = "   ")
library(sp)
library(INLA)
library(fields)
lcall <- inla.getOption('inla.call')
## inla.setOption(inla.call='remote')
## inla.setOption(num.threads=4)
@

We use the \texttt{burkitt} data set from the \pkg{splancs} package. 

<<data>>=
data('burkitt', package='splancs')
t(sapply(burkitt[, 1:3], summary))
@ 

The folowing commands shows the time when each event occurred, Figure~\ref{fig:timeshow}.
<<timeshow,eval=FALSE>>=
n <- nrow(burkitt)
par(mfrow=c(1,1), mar=c(1.5,.1,.1,.1), mgp=c(2,0.7,0))
plot(burkitt$t, rep(1,n), type='h', ylim=0:1, axes=FALSE, xlab='', ylab='')
box(); axis(1)
@ 

We have to define a set of knots over time in order to fit 
SPDE spatio temporal model. 
It is then used to built a temporal mesh 
<<tmesh,eval=FALSE>>=
k <- 6
tknots <- seq(min(burkitt$t), max(burkitt$t), length=k)
abline(v=tknots, lwd=4, col=4) ## add to plot
mesh.t <- inla.mesh.1d(tknots)
@ 

\setkeys{Gin}{width=0.99\textwidth}
\begin{figure}[h]\centering 
<<timeplot,echo=FALSE,fig.width=10,fig.height=2>>=
<<timeshow>>
<<tmesh>>
@ 
\caption{Time when each event occurred (black) and knots used for inference (blue).}
\end{figure}\label{fig:timeshow}

The spatial mesh can be done using the polygon of the region as a boundary. 
We can convert the domain polygon into a 
\texttt{SpatialPolygons} class with 
<<splocd>>=
domainSP <- SpatialPolygons(list(Polygons(
    list(Polygon(burbdy)), '0')))
@ 
and the use it as a boundary
<<bound>>=
mesh.s <- inla.mesh.2d(burpts, boundary=inla.sp2segment(domainSP), 
                       max.edge=c(10, 25), cutoff=3) ### just a crude mesh
@ 

Defining the SPDE model considering the PC-prior 
derived in \cite{fuglstadetal:2017} for the 
model parameters as the practical range, $\sqrt{8\nu}/\kappa$, 
and the marginal standard deviation.  
<<spde>>=
spde <- inla.spde2.pcmatern(
    mesh=mesh.s, alpha=2, ### mesh and smoothness parameter
    prior.range=c(0.05, 0.01), ### P(practic.range<0.05)=0.01
    prior.sigma=c(1, 0.01)) ### P(sigma>1)=0.01
m <- spde$n.spde
@ 

The spatio temporal projection matrix is made considering 
both spatial and temporal locations and both spatial and temporal meshes. 
<<Ast>>=
dim(Ast <- inla.spde.make.A(mesh=mesh.s, loc=burpts, n.group=length(mesh.t$n), 
                            group=burkitt$t, group.mesh=mesh.t))
@ 
Internally \texttt{inla.spde.make.A} function makes a row Kronecker product (see \texttt{inla.row.kron}) between the spatial projector matrix and the group (temporal in our case) projector one. 
This matrix has number of columns equals to the number 
of nodes in the mesh times the number of groups. 

The index set is made considering the group feature: 
<<idx>>=
idx <- inla.spde.make.index('s', spde$n.spde, n.group=mesh.t$n)
@ 

The data stack can be made considering the ideas for the purerly spatial model. 
So, we do need to consider the expected number of cases at the 
1) integration points and 2) data locations. 
For the integration points it is the spacetime volume computed 
for each mesh node and time knot, 
considering the spatial area of the dual mesh polygons, 
as in Chapter~\ref{ch:lcox}, times the 
the length of the time window at each time point. 
For the data locations it is zero as for a point the expectation is zero, 
in accord to the likelihood approximation proposed by \cite{simpsonetal:2016}. 

The dual mesh is extracted considering the function 
\texttt{inla.mesh.dual()}, 
available in 
\url{http://inla.r-inla-download.org/r-inla.org/tutorials/spde/R/spde-tutorial-functions.R}
<<dualmesh>>=
source('R/spde-tutorial-functions.R') 
dmesh <- inla.mesh.dual(mesh.s)
@ 

Them, we compute the intersection with each 
polygon from the mesh dual using the functions 
\texttt{gIntersection()} from the 
\textbf{\textsf{rgeos}} package
(show the sum of the intersection polygons areas):
<<pols>>=
library(rgeos)
sum(w <- sapply(1:length(dmesh), function(i) {
    if (gIntersects(dmesh[i,], domainSP))
        return(gArea(gIntersection(dmesh[i,], domainSP)))
    else return(0)
}))
@  
We can see that it sum up the same as the domain area:
<<areapl>>=
gArea(domainSP)
@ 

The spatio temporal volume is the product of these values and the time window length of each time knot.
<<stvol>>=
st.vol <- rep(w, k) * rep(diag(inla.mesh.fem(mesh.t)$c0), m)
@ 

The data stack is built using
<<stak>>=
y <- rep(0:1, c(k * m, n))
expected <- c(st.vol, rep(0, n))
stk <- inla.stack(data=list(y=y, expect=expected), 
    A=list(rBind(Diagonal(n=k*m), Ast), 1), 
    effects=list(idx, list(a0=rep(1, k*m + n))))
@ 

Model fitting (using the cruder approximation: 'gaussian')
<<fit,results='hide'>>=
pcrho <- list(prior='pccor1', param=c(0.7, 0.7))
form <- y ~ 0 + a0 + 
    f(s, model=spde, group=s.group, 
      control.group=list(model='ar1', hyper=list(theta=pcrho)))
burk.res <- inla(form, family='poisson', 
                 data=inla.stack.data(stk), E=expect,
                 control.predictor=list(A=inla.stack.A(stk)),
                 control.inla=list(strategy='gaussian'))
@ 

The exponential of the intercept plus the random effect at each spacetime integration point is the relative risk at each these points. 
This relative risk times the spacetime volume will give the expected number of points at each these spacetime locations. 
Summing it will approaches the number of observations:
<<nexpected>>=
eta.at.integration.points <- burk.res$summary.fix[1,1] + burk.res$summary.ran$s$mean
c(n=n, 'E(n)'=sum(st.vol*exp(eta.at.integration.points)))
@ 

We can plot the posterior marginal distributions for the intercept and parameters, in Figure~\ref{fig:irf}, with
<<irf,eval=FALSE>>=
par(mfrow=c(2,2), mar=c(3,3,1,1), mgp=c(1.7,0.7,0))
plot(burk.res$marginals.fix[[1]], type='l', xlab='Intercept')
plot(burk.res$marginals.hy[[1]], type='l', 
     xlim=c(0, 10), xlab='Practical range')
plot(burk.res$marginals.hy[[2]], type='l', 
     xlim=c(0, 3), xlab='Standard deviation')
plot(burk.res$marginals.hy[[3]], type='l', 
     xlim=c(0, 1), xlab='time correlation')
@ 
\begin{figure}[h]\centering
<<parsfig,echo=FALSE,fig.width=7,fig.height=5,out.width='0.97\\textwidth'>>=
<<irf>>
@ 
\caption{Intercept and Random Field parameters posterior marginal distributions.}
\end{figure}\label{fig:irf}

The projection over a grid for each time knot can be done with
<<>>=
r0 <- diff(range(burbdy[,1]))/diff(range(burbdy[,2]))
prj <- inla.mesh.projector(mesh.s, xlim=range(burbdy[,1]),
                           ylim=range(burbdy[,2]), dims=c(100, 100/r0)) 
ov <- over(SpatialPoints(prj$lattice$loc), domainSP)
m.prj <- lapply(1:k, function(j) {
  r <- inla.mesh.project(prj, burk.res$summary.ran$s$mean[1:m+(j-1)*m])
  r[is.na(ov)] <- NA;   return(r) 
})
@ 

The fitted latent field at each time knot is in Figure~\ref{fig:stppres}, 
produced with the code below. 
It can also be done for the standard deviation. 
<<plotstpp,eval=FALSE>>=
igr <- apply(abs(outer(burkitt$t, mesh.t$loc, '-')), 1, which.min)
zlm <- range(unlist(m.prj), na.rm=TRUE)
par(mfrow=c(2,3), mar=c(0,0,0,0))
for (j in 1:k) {
    image(x=prj$x, y=prj$y, z=m.prj[[j]], asp=1, 
          xlab='', zlim=zlm, axes=FALSE, col=tim.colors(64))
    points(burkitt[igr==j, 1:2], pch=19)
}; image.plot(legend.only=TRUE, zlim=zlm, legend.mar=5)
@ 
\begin{figure}\centering
<<stppres,echo=FALSE,fig.width=5,fig.height=7,out.width='0.97\\textwidth'>>=
<<plotstpp>>
@ 
\caption{Fitted latent field at each time knot 
overlayed by the points closer in time.}
\end{figure}\label{fig:stppres}

