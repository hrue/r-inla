nrow=10
ncol=5
Smat=matrix(NA,nrow=nrow,ncol=ncol)
j=1:ncol
for(i in 1:nrow)
    Smat[i,j] = 0.1*(i+2*j)
mapping = inla.lattice2node.mapping(nrow,ncol)
## simulate a covariate
z.mat=matrix(rnorm(nrow*ncol),nrow,ncol)
z.mat[mapping]
mapping
zmat=matrix(1:(nrow*ncol),nrow,ncol)
zmat
z.mat[mapping]
zmat[mapping]
mapping
zmat
zmat[mapping]
dim(mapping)
as.numeric(zmat)

zz = as.numeric(zmat)
mm = as.numeric(mapping)
zz
mm
zz[mm]
inla.lattice2node(2,1,nrow,ncol)
mm
zz[which(mm)]
zz[which(mm==1:(nrow*ncol)]
which
?which
?index
?which
match
?match
match(mm, 1:(nrow*ncol))
zz[match(mm, 1:(nrow*ncol))]
mm
match(mm, 1:(nrow*ncol))
mm[match(mm, 1:(nrow*ncol))]
zz[mm[match(mm, 1:(nrow*ncol))]]
zz
mm
ama
zmat
mapping
zz[mm[match(mm, 1:(nrow*ncol))]]
nrow=3
ncol = 6
mapping = inla.lattice2node.mapping(nrow,ncol)
mapping
n=nrow*ncol
z
z = matrix(1:n, nrow,ncol)
z
mapping
t(mapping)
as.numeric(t(mapping))
mapping
z[mapping]
z
mapping
as.matrix(z[mapping],nrow,ncol)
inla.matrix2vector(z)
nrow = 2
ncol = 3
mapping = inla.lattice2node.mapping(nrow,ncol)
for (i in 1:nrow){
    for(j in 1:ncol){
        print(paste("Alt.1: lattice index [", i,",", j,"] corresponds",
                    "to node [", mapping[i,j],"]", sep=""))
    }
}
for (i in 1:nrow){
    for(j in 1:ncol){
        print(paste("Alt.2: lattice index [", i,",", j,"] corresponds to node [",
                    inla.lattice2node(i,j,nrow,ncol), "]", sep=""))
    }
}
inv.mapping = inla.node2lattice.mapping(nrow,ncol)
for(node in 1:(nrow*ncol))
   print(paste("Alt.1: node [", node, "] corresponds to lattice index [",
               inv.mapping$irow[node], ",",
               inv.mapping$icol[node],"]", sep=""))
for(node in 1:(nrow*ncol))
   print(paste("Alt.2: node [", node, "] corresponds to lattice index [",
               inla.node2lattice(node,nrow,ncol)$irow[1], ",",
               inla.node2lattice(node,nrow,ncol)$icol[1],"]", sep=""))
}
n = nrow*ncol
z = matrix(1:n,nrow,ncol)
print(inla.matrix2vector(z))
z
mapping
n = nrow*ncol
z = matrix(1:n,nrow,ncol)
z.vector = inla.matrix2vector(z)
print(mapping)
print(z)
print(z.vector)
## the vector2matrix is the inverse, and should give us z back
z.matrix = inla.vector2matrix(z.vector, nrow,ncol)
print(z.matrix)
nrow=100
ncol=50
n = nrow*ncol
s.mat=matrix(NA,nrow=nrow,ncol=ncol)
j=1:ncol
for(i in 1:nrow)
    s.m[i,j] = 0.1*(i+2*j)
## simulate a covariate
z.mat=matrix(rnorm(nrow*ncol),nrow,ncol)
## noise
noise.mat=matrix(rnorm(nrow*ncol, sd=0.3),nrow,ncol)
##simulate data
y.mat = s.mat  + 0.5*z.mat + noise.mat
## convert to the internal representation
y = inla.matrix2vector(y.mat)
z = inla.matrix2vector(z.mat)
node = 1:n
formula= y ~ z + f(node, model="rw2d", nrow=nrow, ncol=ncol)
data=data.frame(y=y,z=z,node=node)
#fit the model
result=inla(formula,family="gaussian",data=data)
#plot the posterior mean for latent field
image(inla.vector2lattice(result$summary.random$node[,2],nrow,ncol))
result=inla(formula,family="gaussian",data=data, verbose=TRUE)
mean(z)
formula= y ~ z + f(node, model="rw2d", nrow=nrow, ncol=ncol, constr=TRUE)
data=data.frame(y=y,z=z,node=node)
#fit the model
result=inla(formula,family="gaussian",data=data, verbose=TRUE)
## convert to the internal representation
y = inla.matrix2vector(y.mat)
z = inla.matrix2vector(z.mat)
node = 1:n
formula= y ~ z + f(node, model="rw2d", nrow=nrow, ncol=ncol, constr=TRUE)-1
data=data.frame(y=y,z=z,node=node)
#fit the model
result=inla(formula,family="gaussian",data=data, verbose=TRUE)
#plot the posterior mean for latent field
image(inla.vector2lattice(result$summary.random$node[,2],nrow,ncol))
#plot the posterior mean for latent field
image(inla.vector2matrix(result$summary.random$node[,2],nrow,ncol))
image(inla.vector2matrix(s.m,nrow,ncol))
image(inla.vector2matrix(s.mat,nrow,ncol))
s.mat
s.mat=matrix(NA,nrow=nrow,ncol=ncol)
j=1:ncol
for(i in 1:nrow)
    s.mat[i,j] = 0.1*(i+2*j)
## simulate a covariate
z.mat=matrix(rnorm(nrow*ncol),nrow,ncol)
## noise
noise.mat=matrix(rnorm(nrow*ncol, sd=0.3),nrow,ncol)
##simulate data
y.mat = s.mat  + 0.5*z.mat + noise.mat
## convert to the internal representation
y = inla.matrix2vector(y.mat)
z = inla.matrix2vector(z.mat)
node = 1:n
formula= y ~ z + f(node, model="rw2d", nrow=nrow, ncol=ncol)-1
data=data.frame(y=y,z=z,node=node)
#fit the model
result=inla(formula,family="gaussian",data=data, verbose=TRUE)
#plot the posterior mean for latent field
image(inla.vector2matrix(result$summary.random$node[,2],nrow,ncol))
image(inla.vector2matrix(z.mat,nrow,ncol))
z.mat
image(inla.vector2matrix(s.mat,nrow,ncol))
image(inla.vector2matrix(result$summary.random$node[,2],nrow,ncol))
image(t(inla.vector2matrix(s.mat,ncol,nrow))
)
image(t(inla.vector2matrix(s.mat,nrow,ncol))
)
#plot the posterior mean for latent field with the truth
par(mfrow=c(2,1))
image(inla.vector2matrix(s.mat,nrow,ncol))
image(inla.vector2matrix(result$summary.random$node[,2],nrow,ncol))
result$summary.random
names(result$summary.random)
result$summary.random$node
names(result$summary.random$node)
result$summary.random$node$mean
#plot the posterior mean for latent field with the truth
par(mfrow=c(2,1))
image(inla.vector2matrix(s.mat,nrow,ncol))
image(inla.vector2matrix(result$summary.random$mean,nrow,ncol))
nrow=100
ncol=50
n = nrow*ncol
s.mat=matrix(NA,nrow=nrow,ncol=ncol)
j=1:ncol
for(i in 1:nrow)
    s.mat[i,j] = 0.1*(i+2*j)
## simulate a covariate
z.mat=matrix(rnorm(nrow*ncol),nrow,ncol)
## noise
noise.mat=matrix(rnorm(nrow*ncol, sd=0.3),nrow,ncol)
##simulate data
y.mat = s.mat  + 0.5*z.mat + noise.mat
## convert to the internal representation
y = inla.matrix2vector(y.mat)
z = inla.matrix2vector(z.mat)
node = 1:n
formula= y ~ z + f(node, model="rw2d", nrow=nrow, ncol=ncol)
data=data.frame(y=y,z=z,node=node)
#fit the model
result=inla(formula,family="gaussian",data=data, verbose=TRUE)
#plot the posterior mean for latent field with the truth
par(mfrow=c(2,1))
image(inla.vector2matrix(s.mat,nrow,ncol))
image(inla.vector2matrix(result$summary.random$mean,nrow,ncol))
nrow
ncol
result$summary.random$mean
result$summary.random$node$mean
#plot the posterior mean for latent field with the truth
par(mfrow=c(2,1))
image(s.mat)
image(inla.vector2matrix(result$summary.random$node$mean,nrow,ncol))
nrow=100
ncol=50
n = nrow*ncol
s.mat=matrix(NA,nrow=nrow,ncol=ncol)
j=1:ncol
for(i in 1:nrow)
    s.mat[i,j] = 0.1*(i+2*j)
## a covariate
z.mat=matrix(runif(nrow*ncol),nrow,ncol)
## noise
noise.mat=matrix(rnorm(nrow*ncol, sd=0.3),nrow,ncol)
## make simulated data
y.mat = s.mat  + 0.5*z.mat + noise.mat
## convert matrices to the internal representation in INLA
y = inla.matrix2vector(y.mat)
z = inla.matrix2vector(z.mat)
node = 1:n
formula= y ~ z + f(node, model="rw2d", nrow=nrow, ncol=ncol)
data=data.frame(y=y,z=z,node=node)
## fit the model
result=inla(formula, family="gaussian", data=data)
#plot the posterior mean for `node' with the truth
par(mfrow=c(2,1))
image(s.mat)
image(inla.vector2matrix(result$summary.random$node$mean,nrow,ncol))
nrow=50
ncol=25
n = nrow*ncol
s.mat=matrix(NA,nrow=nrow,ncol=ncol)
j=1:ncol
for(i in 1:nrow)
    s.mat[i,j] = 0.1*(i+2*j)
## a covariate
z.mat=matrix(runif(nrow*ncol),nrow,ncol)
## noise
noise.mat=matrix(rnorm(nrow*ncol, sd=0.3),nrow,ncol)
## make simulated data
y.mat = s.mat  + 0.5*z.mat + noise.mat
## convert matrices to the internal representation in INLA
y = inla.matrix2vector(y.mat)
z = inla.matrix2vector(z.mat)
node = 1:n
formula= y ~ z + f(node, model="rw2d", nrow=nrow, ncol=ncol)
data=data.frame(y=y,z=z,node=node)
## fit the model
result=inla(formula, family="gaussian", data=data)
#plot the posterior mean for `node' with the truth
par(mfrow=c(2,1))
image(s.mat)
image(inla.vector2matrix(result$summary.random$node$mean,nrow,ncol))
q()
