axis(1, at = seq(1, n, by = 1))
axis(2, at = seq(1, m, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
m = 10
n = 20
A = runif(m*n)
A = matrix(A,m,n)
image(1:n,1:m,A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, n, by = 1))
axis(2, at = seq(1, m, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
image(1:m,1:n,A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, m, by = 1))
axis(2, at = seq(1, n, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
A
x = 1:n
y = 1:m
image(x, y, A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, m, by = 1))
axis(2, at = seq(1, n, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
x = 1:n
y = 1:m
image(x, y, A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, n, by = 1))
axis(2, at = seq(1, m, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
x = 1:m
y = 1:n
image(x, y, A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, n, by = 1))
axis(2, at = seq(1, m, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
x = 1:m
y = 1:n
image(x, y, A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, m, by = 1))
axis(2, at = seq(1, n, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
m = 20
n = 10
A = runif(m*n)
A = matrix(A,m,n)
x = 1:m
y = 1:n
image(x, y, A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, m, by = 1))
axis(2, at = seq(1, n, by = 1))
box()
title(main = "Visualizeing Matrix", font.main = 4)
A
image(A, col = gray(0:200/200), axes = FALSE)
x = 1:m
y = 1:n
image(x,y,A, col = gray(0:200/200), axes = FALSE)
axis(1, at = seq(1, m, by = 1))
axis(2, at = seq(1, n, by = 1))
text()
box()
title(main = "Visualizeing Matrix", font.main = 4)
dfm <- melt(A)
# plot
require(ggplot2)
ggplot(dfm, aes(x = Time, y = State)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 2)))
rep(0,2*p+1)
p = 1
rep(0,2*p+1)
if (p>=m) {jump.range = m} else {jump.range = 2*p+1}
jump.range
if (p>=m) {jump.range = m} else {jump.range = 2*p+1}
jump.range
p = 6
if (p>=m) {jump.range = m} else {jump.range = 2*p+1}
jump.range
m
m=4
p = 6
if (p>=m) {jump.range = m} else {jump.range = 2*p+1}
jump.range
ï¼Ÿdiag
?diag
diag(c(1,2,3,4,5))
diag(c(1,2,3,4,5),1)
diag(c(1,2,3,4,5),-1)
library(INLA)
demo(Bym)
plot(g)
g
inla.read.graph(g)
h = inla.read.graph(g)
r = inla.qrecordering(h,"band")
r = inla.qreordering(h,"band")
plot(r.reordering)
names(r)
plot(r$reordering)
inla.spy(h,reordering=r)
plot(r$ireordering)
install.packages("Rgraphviz")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("Rgrapgviz")
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
library(Rgraphviz)
plot(g)
plot(g)
h = inla.read.graph(g)
r = inla.qreordering(h,"band")
plot(r$reordering)
inla.spy(h,reordering=r)
plot(h)
warnings()
plot(h)
Q = inla.spy(h,reordering=r)
L = chol(Q)
L
Q
r
L = chol(r)
runif(5)
runif(5,5)
runif(c(5,5))
runif
?runif
Q = matrix(runif(25),5,5)
Q = Q%*%t(Q)
image(Q)
imagesc(Q)
plot(Q)
inla.spy(Q)
clear all
clear
n <- 200;
set.seed(123)
pts <- cbind(s1=sample(1:n/n-0.5/n)^2, s2=sample(1:n/n-0.5/n)^2)
pts
dmat <- dist(pts)
dmat
names(dmat)
dim(dmat)
library(INLA)library(Matrix)data(Tokyo)y = Tokyo$yn = Tokyo$ntime = Tokyo$time
library(INLA)
library(Matrix)
data(Tokyo)
n = Tokyo$n
min(n)
max(n)
Tokyo = Tokyo[Tokyo$n==2,]  # remove the line with n=1
Tokyo$time = 1:dim(Tokyo)[1]
N = length(time)
N
time = Tokyo$time
Tokyo
Tokyo$y
library(INLA)
demo(Tokyo)
library(INLA)
demo(Tokyo)
library(INLA)
demo(Tokyo)
Tokyo
names(result)
summary(result)
result$Q
result$model.matrix
names(result)
result$size.random
result$summary.random
result$marginal
result$marginal.hyperparameter
names(result)
result$summary.hyperpar
library(INLA)
demo(Tokyo)
names(result)
result$summary.random
result$summary.random[,2]
result$summary.random$mean
result$summary.random$time[,2]
invlogit <- function(x){return(1/(1+exp(-x)))}
invlogit(result$summary.random$time[,2])
plot(invlogit(result$summary.random$time[,2]))
plot(pnorm(result$summary.random$time[,2]))
plot(qnorm(result$summary.random$time[,2]))
R = toeplitz(sparseVector(c(6,-4,1,1,-4),c(1,2,3,N-1,N),length=N))
library(INLA)
library(Matrix)
data(Tokyo)
y = Tokyo$y
n = Tokyo$n
time = Tokyo$time
Tokyo = Tokyo[Tokyo$n==2,]  # remove the line with n=1
Tokyo$time = 1:dim(Tokyo)[1]
N = length(time)
# construct R matrix (IGMRF, can not be chol)
# N = 20
R = toeplitz(sparseVector(c(6,-4,1,1,-4),c(1,2,3,N-1,N),length=N))
demo(Tpkyo)
demo(Tokyo)
result$marginal.random$time
names(result)
result$summary.random
result$summary.random$time[,2]
x = result$summary.random$time[,2]
t(x)%*%R%*%x
x
library(INLA)
demo(Tokyo)
log(13229.43)
log(28000)
T = result$summary.random$time[,2]
library(INLA)
library(Matrix)
data(Tokyo)
y = Tokyo$y
n = Tokyo$n
time = Tokyo$time
Tokyo = Tokyo[Tokyo$n==2,]  # remove the line with n=1
Tokyo$time = 1:dim(Tokyo)[1]
formula = y ~ f(time, model="rw2", cyclic=TRUE, param=c(1,0.0001)) - 1
result = inla(formula, family="binomial", Ntrials=n, data=Tokyo)
plot(result)
summary(result)
result = inla(formula, family="binomial", Ntrials=n, data=Tokyo, control.family = list(link = "probit"))
plot(result)
names(result)
result$summary.random
result$summary.random$time[,1]
result$summary.random$time[,2]
result$summary.random$time[,3]
result$summary.random$time[,3]
result$summary.random$time[,3]
names(result)
result$summary.hyperpar
result$marginal.hyperpar
result$marginals.hyperpar
result$marginals.hyperpar$`Precision for time`[,1]
result$marginals.hyperpar$`Precision for time`[,2]
result = inla(formula, family="binomial", Ntrials=n, data=Tokyo, control.family = list(link = "logit"))
plot(result)
result$summary.random$time[,2]
result$summary.random$time[,3]
result$marginals.hyperpar$`Precision for time`[,1]
result$marginals.hyperpar$`Precision for time`[,2]
summary(result)
library(INLA)
library(Matrix)
data(Tokyo)
y = Tokyo$y
n = Tokyo$n
time = Tokyo$time
Tokyo = Tokyo[Tokyo$n==2,]  # remove the line with n=1
Tokyo$time = 1:dim(Tokyo)[1]
N = length(time)
# construct R matrix (IGMRF, can not be chol)
# N = 20
R = toeplitz(sparseVector(c(6,-4,1,1,-4),c(1,2,3,N-1,N),length=N))
## Define the model
formula = y ~ f(time, model="rw2", cyclic=TRUE, param=c(1,0.0001)) - 1
## The call to inla
result = inla(formula, family="binomial", Ntrials=n, data=Tokyo, control.family = list(link = "logit"))
plot(result)
names(logit)
names(result)
result$summary.random
library(INLA)
library(Matrix)
data(Tokyo)
y = Tokyo$y
n = Tokyo$n
time = Tokyo$time
Tokyo = Tokyo[Tokyo$n==2,]  # remove the line with n=1
Tokyo$time = 1:dim(Tokyo)[1]
formula = y ~ f(time, model="rw2", cyclic=TRUE, param=c(1,0.0001)) - 1
result = inla(formula, family="binomial", Ntrials=n, data=Tokyo, control.family = list(link = "probit"))
summary(result)
log(11235.35)
log(11235.35)/11235.35
11235.35/20820.45
log(6306.46)
log(49108.58)
library(INLA)
data(BivMetaAnalysis)
data = BivMetaAnalysis
data
formula <- Y~f(diid, model="2diid", param=c(0.25, 0.025, 0.25, 0.025, 0, 0.4), n=N2) +
lag.tp + lag.tn + ct.tp + ct.tn + mr.tp + mr.tn -1
model = inla(formula, family="binomial", data=BivMetaAnalysis, Ntrials=N, verbose=T)
N2 <- dim(BivMetaAnalysis)[1]
formula <- Y~f(diid, model="2diid", param=c(0.25, 0.025, 0.25, 0.025, 0, 0.4), n=N2) +
lag.tp + lag.tn + ct.tp + ct.tn + mr.tp + mr.tn -1
model = inla(formula, family="binomial", data=BivMetaAnalysis, Ntrials=N, verbose=T)
model
summary(model)
library(INLA)
inla.upgrade(testing=TRUE)
inla.version()
data(Epil)
Epil
inla.doc("iid")
inla.doc("table:")
?is.dataframe
?is.data.frame
stop("Colomns of data must have names, include TP, TN, FP, FN. \n")
print("Packages 'INLA' is not installed, install and load stable version 'INLA' automatically")
?is.negative
?is.integer
setwd("~/Desktop/INLADiagMeta/dataset")
library(INLA)
library(MASS)
data = read.table("Telomerase.txt", header=TRUE)
names(Telomerase)
data
save.image("~/Desktop/INLADiagMeta/dataset/Telomerase.RData")
data(Telomerase)
?load
load("Telomerase.RData")
Telomerase
Telomerase=data
save.image("~/Desktop/INLADiagMeta/dataset/Telomerase.RData")
load("Telomerase.RData")
save.image("~/Desktop/INLADiagMeta/dataset/Telomerase.RData")
load("Telomerase.RData")
Telomerase
data(Telomerase)
data("Telomerase")
?data
names(Telomerase)
get(Telomerase)
?get
data(list=Telomerase)
warnings()
a = "telo"
read.table("CTscans.txt",header=TRUE)
?read.table
names.data = c("a","b")
char2num
names.data[1]=Telomerase
names.data[1]
names.data = c("a","b")
names.data[1]
?name
name(Telomerase)
call(Telomerase)
call(names.data[1])
name(names.data[1])
a = 3
as.name(a)
as.name(names.data)
as.name(names.data)=3
as.name(names.data)
as.name(names.data) <- 3
3 <- as.name(names.data)
deparse(substitute(a))
deparse(substitute(Telomerase))
?substitute
?deparse
parse(substitute("a"))
parse("a")
as.name("Telomerase")
find(names(Telomerase)=="TP")
names(Telomerase)
which(names(Telomerase)=="TP")
?upper
toupper("tp")
toupper("TP")
toupper("truepos")
toupper("true_pos")
a = names(Telomerase)
which(a=="tp" |a=="TP")
naems(Telomerase)[3]="True Positive"
names(Telomerase)[3]="True Positive"
names(Telomerase)
data = read.table("Telomerase.txt", header=TRUE)
dim.data = dim(data)
names.pair = cbind(c("TP","TN","FP","FN"),c("tp","tn","fp","fn"))
position = aggregate(names.pair,list(c(1,2,3,4)),
function(x){a = (var.name==x[1] | var.name==x[2]);return(which(a))})
position = position[-1]
var.name <- toupper(names(data))
position = aggregate(names.pair,list(c(1,2,3,4)),
function(x){a = (var.name==x[1] | var.name==x[2]);return(which(a))})
position = position[-1]
position
idx.main = which(var.name=="TP" | var.name=="FP" | var.name=="FN" |var.name="TN")
idx.main = which(var.name=="TP" | var.name=="FP" | var.name=="FN" |var.name=="TN")
idx.main
length(data)
dim(data)
data[-idx.main]
is.chatacter(data[-c(2:8)])
is.character(data[-c(2:8)])
data[-c(2:8)]
a =data[-c(2:8)]
?is.numerical
?is.number
tyoeof(a)
typeof(a)
typeof(get(a))
typeof(list(a))
get(a)
get(data[8])
get(data[,8])
sapply(data,class)
sapply(data,typeof)
df(sapply(data,typeof))
lapply(data,class)
?is.factor
is.factor(data[-c(2:8)])
is.factor(class(data[-c(2:8)]))
class(data[1])
data = read.table("Telomerase.txt", header=TRUE)
I = dim(data)[1]
TP = data$TP
TN = data$TN
FP = data$FP
FN = data$FN
n1 = TP+FN
n0 = FP+TN
Se = TP/n1
Sp = TN/n0
N = n1+n0
Ntrials = matrix(rbind(n1,n0),2*I,1)
Y = matrix(rbind(TP,TN),2*I,1)
tp = matrix(rbind(rep(1,I),rep(0,I)),2*I,1)
tn = matrix(rbind(rep(0,I),rep(1,I)),2*I,1)
tn
add.data1=NA
is.na(add.data1)
add.data1=1
is.na(add.data1)
add.data1=c(1,2)
is.na(add.data1)
?stop
add = "add"
stop("missing values in \"%s\" data \n", add)
stop('missing values in \"%s\" data \n', add)
stop('missing values in \%s\ data \n', add)
stop('missing values in %s\ data \n', add)
stop("missing values in \"",add, "\" data \n")
stop("missing values in \"",as.name(add), "\" data \n")
}
stop("missing values in \"",as.name(add), "\" data \n")
stop("missing values in \"",add, "\" data \n")
add = ""
stop("missing values in \"",add, "\" data \n")
add = charactor()
add = character()
stop("missing values in \"",add, "\" data \n")
stop("missing values in",add,"data \n")
stop("missing values in ",add,"data \n")
add = "add"
stop("missing values in ",add,"data \n")
stop("missing values in ",add ,"data \n")
add = "add "
stop("missing values in ",add ,"data \n")
add = character()
stop("missing values in ",add ,"data \n")
stop("no variable named FN in", add, "data \n")
stop("no variable named TP in ", add, "data \n")
source(check.data.R)
source("check.data.R")
source("../package/check.data.R")
data <- check.data(data)
data<0
any(data<0)
any((data<0)[-NA])
(data<0)[-NA]
a = data<0
a=(data<0)
sapply(data,class)
class.data = sapply(data,class)
class.data[-"factor"]
class.data[2,]
class.data=="factor"
which(class.data=="factor")
data[-which(class.data=="factor")]
temp.data = data[-which(sapply(data,class)=="factor")]
temp.data
any(temp.data<0)
data <- check.data(data)
source("../package/check.data.R")
data <- check.data(data)
idx <- which(var.name=="TP" | var.name=="TN" | var.name=="FP" | var.name=="FN")
var.name <- toupper(names(data))
idx <- which(var.name=="TP" | var.name=="TN" | var.name=="FP" | var.name=="FN")
idx
data[idx]
source("../package/check.data.R")
data <- check.data(data)
is.integer(data[idx])
temp.data$TP
class.data = sapply(data,class)
class.data$TP
class.data
class.data = lapply(data,class)
class.data
class.data$TP
is.integer(class.data$TP)
sapply(temp.data,class)!="integer"
source("../package/check.data.R")
data <- check.data(data)
