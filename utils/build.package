#!/usr/bin/env bash 
myself=${0##*/}

logit() {
    echo -e "$myself: $*"
}

fixpermissions () {
    for d in "$@"; do
	echo "Working with [$d]"
	find $d -print | while read f; do
	    if [ -d "$f" -o -x "$f" ]; then
		chmod 755 "$f"
	    elif [ -f "$f" ]; then
		chmod 644 "$f"
	    elif [ -L "$f" ]; then
		echo dont change links ["$f"]
	    else
		echo unknown type ["$f"]
	    fi
	done
    done
}

OPTIND=1 
OPTERR=1        

TDIR=$(echo ~/tmp/RINLA)
BDIR=""
Bsuffix="64"

while getopts d:b:s:h arg; do
    case "$arg" in 
        d) 
	    TDIR="$OPTARG"
	    ;;
        b) 
	    BDIR="$OPTARG"
	    ;;
        s) 
	    Bsuffix="$OPTARG"
	    ;;
	h)
	    logit "Usage:"
	    logit "\t-d WORK_DIRECTORY  ($TDIR)"
	    logit "\t-b BIN_DIRECTORY   ($BDIR)"
	    logit "\t-s BINARY_SUFFIX   ($Bsuffix)"
	    exit
	    ;;
    esac
done

epoch=$(date +%s)
logit "TDIR=$TDIR"
mkdir -p "$TDIR"

TMPDIR="$TDIR/BuildINLA-$epoch"
logit "TMPDIR=$TMPDIR"
mkdir -p "$TMPDIR"

HGROOT=$(hg root)
test -d "$HGROOT" || exit 1
logit "HGROOT=$HGROOT"

LOGFILE="$TMPDIR/LOGFILE"
logit "LOGFILE=$LOGFILE"
echo $(date) >> "$LOGFILE"
VERSION="$(date +%y.%m.%d).9000"
logit "Version is '$VERSION' on branch '$(hg branch)'"
bdate=$(date -d @$epoch +%Y%m%d%H%M)
date=$(date -d @$epoch)
hg=$(hg parents --template 'hgid: {node|short} branch: {branch}  date: {date|date}')

RINLA=$TMPDIR/r-inla
mkdir -p "$RINLA"
logit "Sync files"
rsync -auv --delete "$HGROOT/." "$RINLA/." >> $LOGFILE 2>&1 || exit 1

INLA="$RINLA/rinla"
D="$INLA/R"
tt="$TMPDIR/.tt"

logit "Update inla.version()"
cat $D/version.R | \
    awk '/^[ \t]*rinla[.]hgid *=/{ print "    rinla.hgid = ", "inla.trim(\"" hg      "\")"; next;}
         /^[ \t]*inla[.]hgid *=/{  print "    inla.hgid  = ", "inla.trim(\"" inlahg "\")"; next;}
         /^[ \t]*date *=/{       print "    date       = ", "inla.trim(\"" date    "\")"; next;}
         /^[ \t]*bdate *=/{      print "    bdate      = ", "inla.trim(\"" bdate   "\")"; next;}
        /^[ \t]*version *=/{      print "    version      = ", "inla.trim(\"" version   "\")"; next;}
	 {print}' hg="$hg" inlahg="$inlahg" bdate="$bdate" date="$date" version="$VERSION" > $tt
mv -f $tt $D/version.R

logit Make help-pages
( 
    cd "$D"
    ./make-man-pages 2>&1
) >> $LOGFILE

logit "Update DESCRIPTION file"
desc="$INLA/DESCRIPTION"
{
    egrep -v '^(Version:|Date:)' "$desc"
    echo "Version: $VERSION"
    echo "Date: $(date '+%Y-%m-%d') ($hg)"
} > $tt && mv -f $tt $desc

logit "Update the NAMESPACE file"
{
    echo ""
    echo "# The functions to be exported are defined in the R-code with"
    echo "# lines as:"
    echo "# ## Export: func1"
    echo "# ## Export: func1 func2"
    echo "# etc..."

    find $INLA/R -name \*.R | while read f; do
        egrep "^## *Export *:" $f | while read ff; do
            echo "$ff" | awk -F: '{print $2}' | awk '{for(i=1;i<=NF;i++) print $i}' | \
                awk '{nf = split($0, a, /!/)
                      if (nf == 2) print "S3method(" a[1] ", "  a[2] ")"
                      if (nf == 1) print "export(" a[1] ")" }'
        done
    done
} >> $INLA/NAMESPACE || exit 1

if [ "xx$BDIR" != "xx" ]; then
    ## add also binaries
    error=0
    for ff in inla fmesher; do
	b=$BDIR/$ff$Bsuffix
	d=$INLA/inst/bin/linux/64bit/${ff}.run
	if [ -f "$b" ]; then
	    cp "$b" "$d"
	    chmod a+rx "$d"
	else
	    logit "ERROR: Cannot find binary [$b]"
	    logit "ERROR: I will proceed without it..."
	    error=1
	fi
    done
    if [ $error -eq 1 ]; then
	BDIR=""
    fi
fi

logit "Check file permissions"
fixpermissions "$INLA" >> "$LOGFILE" 2>&1

logit "Build the INLA package"
(
    cd "$TDIR"
    R --vanilla CMD build --resave-data --keep-empty-dirs --no-build-vignettes --no-manual "$INLA" >> "$LOGFILE" 2>&1 || exit 1
    INLApkg=$(echo INLA_*.tar.gz)
    tgzINLApkg=${INLApkg%%.tar.gz}.tgz
    mv "$INLApkg" "$tgzINLApkg"
    logit "Install with 'R --vanilla CMD INSTALL $TDIR/$tgzINLApkg'"
)

if [ "xx$BDIR" == "xx" ]; then
   logit "Binaries are not included. Use:"
   logit "\tlibrary(INLA)"
   logit "\tinla.setOption(inla.call=...)"
   logit "\tinla.setOption(fmesher.call=...)"
   logit "to define the path to your binaries."
fi 

