#!/bin/bash
set -u

INLA_VERSION=$(echo $INLA_TAG | awk -F_ '{print $2}')
rm INLA*tar.gz INLA*tgz INLA*zip || true

date=$(date)
D=r-inla/rinla/R
DD=INLA/R
RVersion=$(R --vanilla --version | grep '^R version' | awk '{print $3}' | awk -F. '{print $1 "." $2}')
RRVersion="$RVersion"

## We need to remove these as we change them
for f in INLA/NAMESPACE INLA/DESCRIPTION; do
    test -f $f && rm -f $f
done

## make man-pages, compile doc-pdf's and run roxygen
make -C $D/../.. -B

## sync with 'L' and then fix those dirs we need to fix afterwards
rsync -auvL --delete --exclude '/*~' --exclude TAGS $D/.. INLA/.
rsync -auv $D/../inst/bin/linux/64bit/first/. $DD/../inst/bin/linux/64bit/first/.
./updateBin

## Modify the DESCRIPTION file
tt=$(mktemp)
desc="INLA/DESCRIPTION"
{
    grep -v -E '^(Version:|Date:)' r-inla/rinla/DESCRIPTION
    echo "Version: $INLA_VERSION"
} > $tt && mv -f $tt $desc

~hrue/bin/fix-permissions INLA

mf="INLA.pdf"
test -f $mf && rm -f $mf
R --vanilla CMD Rd2pdf --no-preview --batch INLA >/dev/null 2>&1 || exit 1
md="INLA/inst/doc/manual"
test -d $md || mkdir $md
cp $mf $md/$mf

SRC=INLA-source.tgz
tar cvfz INLA-source.tgz INLA


if R --vanilla CMD build --keep-empty-dirs --resave-data --log INLA; then
    echo '*** Build OK'
else
    if R --vanilla CMD build --keep-empty-dirs --resave-data --no-build-vignettes --log INLA; then
	echo '*** Build without rebuilding vignettes OK'
    else
	exit 1
    fi
fi

gzINLA=$(echo INLA_*.tar.gz)
tgzINLA=${gzINLA%%.tar.gz}.tgz
tgzINLAarm64=${gzINLA%%.tar.gz}arm64.tgz
zipINLA=${tgzINLA%%.tgz}.zip
cp -v $gzINLA $tgzINLA
cp -v $gzINLA $tgzINLAarm64

DD=$(echo ~/R/x86_64-redhat-linux-gnu-library/default)
test -d $DD || mkdir -p $DD
export R_ENABLE_JIT=3
export R_COMPILE_PKGS=1
R CMD INSTALL --use-vanilla --library=$DD $gzINLA || exit 1

~/bin/fix-permissions $DD

( cd $DD; zip -v -r $zipINLA INLA; )
mv -f $DD/$zipINLA .

( cd $DD; tar cvfz $gzINLA INLA; )
mv -f $DD/$gzINLA .

ls -l $tgzINLA $tgzINLAarm64 $gzINLA $zipINLA

##
## remove binaries not needed
## tgzINLA is for MAC
## tgzINLAarm64 is for MAC arm64
## gzINLA is for Linux
## zipINLA is for Windows
##
TDIR=INLA-TMP
test -d $TDIR && rm -rf $TDIR
mkdir $TDIR

(
    echo " *** Make Mac binary"
    cd $TDIR
    tar xfz ../$tgzINLA
    for d in INLA/{,inst/}bin/{linux,windows}/{32,64}bit  INLA/{,inst/}bin/mac.arm64; do
	echo "    -> $d"
	test -d $d && rm -rf $d;
    done
    rm -f ../$tgzINLA
    tar cfz ../$tgzINLA INLA
    rm -rf INLA
)

(
    echo " *** Make Mac binary ARM64"
    cd $TDIR
    tar xfz ../$tgzINLAarm64
    for d in INLA/{,inst/}bin/{mac,linux,windows}/{32,64}bit; do
	echo "    -> $d"
	test -d $d && rm -rf $d;
    done
    rm -f ../$tgzINLAarm64
    tar cfz ../$tgzINLAarm64 INLA
    rm -rf INLA
)

(
    echo " *** Make Linux binary"
    cd $TDIR
    tar xfz ../$gzINLA
    for d in INLA/{,inst/}bin/{mac,windows}/{32,64}bit INLA/{,inst/}bin/mac.arm64; do
	echo "    -> $d"
	test -d $d && rm -rf $d;
    done
    rm -f ../$gzINLA
    tar cfz ../$gzINLA INLA
    rm -rf INLA
)

(
    echo " *** Make Windows binary"
    cd $TDIR
    unzip -q ../$zipINLA
    for d in INLA/{,inst/}bin/{linux,mac}/{32,64}bit INLA/{,inst/}bin/mac.arm64; do
	echo "    -> $d"
	test -d $d && rm -rf $d;
    done
    rm -f ../$zipINLA
    zip -r -q ../$zipINLA INLA
    rm -rf INLA
)
rm -rf $TDIR

www=../www
wwwR=../www/R

convert_to_mac_binary () {
    for f in "$@"; do
	ff=$(basename $f)
	scp $f $INLA_MAC:$ff
	ssh -x $INLA_MAC bin/R CMD INSTALL --build  $ff
	scp $INLA_MAC:$ff $f
    done
}

convert_to_mac_arm64_binary () {
    for f in "$@"; do
	ff=$(basename $f)
	scp $f $INLA_MAC_ARM64:$ff
	ssh -x $INLA_MAC_ARM64 bin/R CMD INSTALL --build  $ff
	scp $INLA_MAC_ARM64:$ff $f
    done
}

updateBinaryPackages () {
    for d in "$@"; do
	(
	    echo "RUN ./updateBinaryPackages in dir=$d"
	    cd "$d"
	    ./updateBinaryPackages
	)
    done
}


if [ $# -ge 1 -a "$1" == "1" ]; then
    for prefix in stable testing; do
	d=$wwwR/$prefix/src/contrib
	cp -v $gzINLA $d/INLA_$INLA_VERSION.tar.gz
	updateBinaryPackages $d

	d=$wwwR/$prefix/bin/macosx/contrib/$RVersion
	cp -v $tgzINLA $d/INLA_$INLA_VERSION.tgz
	convert_to_mac_binary $d/INLA_$INLA_VERSION.tgz
	updateBinaryPackages $d

	d=$wwwR/$prefix/bin/macosx/arm64/contrib/$RRVersion
	cp -v $tgzINLAarm64 $d/INLA_$INLA_VERSION.tgz
	convert_to_mac_arm64_binary $d/INLA_$INLA_VERSION.tgz
	updateBinaryPackages $d

	d=$wwwR/$prefix/bin/windows/contrib/$RVersion
	cp -v $zipINLA $d/INLA_$INLA_VERSION.zip
	updateBinaryPackages $d
    done
fi

if [ $# -ge 1 -a "$1" == "2" ]; then
    for prefix in testing; do
	d=$wwwR/$prefix/src/contrib
	cp -v $gzINLA $d/INLA_$INLA_VERSION.tar.gz
	updateBinaryPackages $d

	d=$wwwR/$prefix/bin/macosx/contrib/$RVersion
	cp -v $tgzINLA $d/INLA_$INLA_VERSION.tgz
	convert_to_mac_binary $d/INLA_$INLA_VERSION.tgz
	updateBinaryPackages $d

	d=$wwwR/$prefix/bin/macosx/arm64/contrib/$RRVersion
	cp -v $tgzINLAarm64 $d/INLA_$INLA_VERSION.tgz
	convert_to_mac_arm64_binary $d/INLA_$INLA_VERSION.tgz
	updateBinaryPackages $d

	d=$wwwR/$prefix/bin/windows/contrib/$RVersion
	cp -v $zipINLA $d/INLA_$INLA_VERSION.zip
	updateBinaryPackages $d
    done
fi

{
    cat $D/upgrade.R | sed 's/inla.upgrade/inla.installer/g' | grep -v ^#
    cat $D/os.R | grep -v ^#
    echo ' '
    echo '`givemeINLA` = function(...) inla.installer(...)'
    echo 'if (!exists("inla.lib")) inla.lib = NULL'
    echo 'givemeINLA(testing=FALSE, lib = inla.lib)'
    echo 'cat("\n\n\nYou can later upgrade INLA using: inla.upgrade()\n")'
} | sed 's/inla.os/inla.installer.os/g' >  $www/givemeINLA.R

{
    cat $D/upgrade.R | sed 's/inla.upgrade/inla.installer/g' | grep -v ^#
    cat $D/os.R | grep -v ^#
    echo ' '
    echo '`givemeINLA` = function(...) inla.installer(...)'
    echo 'if (!exists("inla.lib")) inla.lib = NULL'
    echo 'givemeINLA(testing=TRUE, lib = inla.lib)'
    echo 'cat("\n\n\nYou can later upgrade INLA using: inla.upgrade(testing=TRUE)\n")'
} | sed 's/inla.os/inla.installer.os/g' >  $www/givemeINLA-testing.R

rm -f $tgzINLA
rm -f $tgzINLAarm64
rm -f $gzINLA
rm -f $zipINLA
rm -f $SRC
